//file:noinspection GroovyAssignabilityCheck
//file:noinspection ConfigurationAvoidance
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'org.ec4j.editorconfig'
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
}

//=============================================

if (project.rootProject.file("local.properties").exists()) {
    try (def stream = project.rootProject.file("local.properties").newDataInputStream()) {
        def properties = new Properties()
        properties.load(stream)
        properties.forEach { key, value ->
            project.ext.set(key, value)
        }
    }
}

mixin {
    add sourceSets.main, "${project.mod_id}.refmap.json"
    config "${project.mod_id}.mixins.json"
    dumpTargetOnFailure true
}

editorconfig {
    excludes = ['**/run/**', '**/*.psd', '**/*.nbt', '**/out/**', '**/.idea/**', '**/*.ogg', '**/gradlew*', '**/*.bbmodel']
    excludeNonSourceFiles = true
}

group = "${project.mod_group}"
version = "${project.mc_version}-${project.mod_version}"
archivesBaseName = "${project.mod_id}"

if (System.getenv('RELEASE_TYPE') != null) {
    status = System.getenv('RELEASE_TYPE').toLowerCase()
    if (status == 'snapshot') status = status.toUpperCase()
} else {
    status = 'SNAPSHOT'
}

if (status != 'release') {
    version = "${version}-${status}"
}

java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version)
        if (!System.getenv('GITHUB_ACTIONS')) {
            vendor = JvmVendorSpec.matching("JetBrains s.r.o.")
        } else {
            vendor = JvmVendorSpec.ADOPTOPENJDK
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

sourceSets {
    api {}
    main.resources {
        srcDirs += 'src/main/generated'
        exclude '.cache'
    }
    data {}
}

configurations {
    library
    modAPI
    runtimeMod
    include { transitive = false }

    sourceSets.forEach((SourceSet sourceSet) -> {
        Configuration extLib = create(sourceSet.getTaskName(null, 'externalLibrary'))
        Configuration impl = getByName(sourceSet.implementationConfigurationName)
        Configuration compile = getByName(sourceSet.compileOnlyConfigurationName)
        Configuration runtime = getByName(sourceSet.runtimeOnlyConfigurationName)
        Configuration ccp = getByName(sourceSet.compileClasspathConfigurationName)
        Configuration rcp = getByName(sourceSet.runtimeClasspathConfigurationName)
        impl.extendsFrom(extLib)
        compile.extendsFrom(library)
        compile.extendsFrom(modAPI)
        if (sourceSet.name != "api") {
            if (sourceSet.name != "main") {
                rcp.extendsFrom(minecraft)
            }
            runtime.extendsFrom(runtimeMod)
        }
        if (sourceSet.name != "main") {
            ccp.extendsFrom(minecraft)
        }
        impl.extendsFrom(include)
    })
    jarJar.extendsFrom(include)
}

configurations {
    datagenLibrary {
        canBeConsumed = false
        canBeResolved = true
        transitive = false
    }
    dataImplementation.extendsFrom(datagenLibrary)
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'Sponge maven'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
        content {
            includeGroup 'org.spongepowered'
        }
    }
    maven {
        name = 'Minecraftschurli Maven'
        url = 'https://minecraftschurli.ddns.net/repository/maven-public/'
        content {
            includeGroup 'com.github.minecraftschurlimods'
        }
    }
    maven {
        name = 'Progwml6 Maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
        content {
            includeGroup 'mezz.jei'
        }
    }
    maven {
        name = 'mcjty maven'
        url = "https://maven.k-4u.nl"
        content {
            includeGroup 'mcjty.theoneprobe'
        }
    }
    maven {
        name = 'theillusivec4 Maven'
        url = 'https://maven.theillusivec4.top/'
        content {
            includeGroup 'top.theillusivec4.curios'
        }
    }
    maven {
        name = 'blamejared Maven'
        url = 'https://maven.blamejared.com'
        content {
            includeGroup 'com.blamejared.controlling'
            includeGroup 'vazkii.patchouli'
        }
    }
    maven {
        name = 'GeckoLib Maven'
        url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup 'software.bernie.geckolib'
        }
    }
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.k-4u.nl'
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.mc_version}-${project.forge_version}"
    annotationProcessor group: 'org.spongepowered', name: 'mixin', version: project.mixin_version, classifier: 'processor'

    // jei for integration
    modAPI fg.deobf("mezz.jei:jei-1.19.1-common-api:${project.jei_version}")
    runtimeMod fg.deobf("mezz.jei:jei-1.19.1-forge:${project.jei_version}")

    // curios for additional inventory slots
    modAPI fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}:api")
    runtimeMod fg.deobf("top.theillusivec4.curios:curios-forge:${project.curios_version}")

    // patchouli for the guide book (arcane compendium)
    modAPI fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}:api")
    runtimeMod fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}")

    // geckolib for animations
    modAPI fg.deobf("software.bernie.geckolib:geckolib-forge-${project.mc_major_version}:${project.geckolib_version}")
    runtimeMod fg.deobf("software.bernie.geckolib:geckolib-forge-${project.mc_major_version}:${project.geckolib_version}")

    // theoneprobe for integration
    modAPI fg.deobf("mcjty.theoneprobe:theoneprobe:${project.top_version}:api") { transitive = false }
    runtimeMod fg.deobf("mcjty.theoneprobe:theoneprobe:${project.top_version}") { transitive = false }

    if (!System.getenv('GITHUB_ACTIONS')) {
        if (project.hasProperty('github_packages_user') && project.hasProperty('github_packages_token')) {
            println 'Using github packages'
        }
        runtimeMod fg.deobf("com.github.minecraftschurlimods:potionbundles:${project.potionbundles_version}")
        //runtimeMod fg.deobf("com.blamejared.controlling:Controlling-forge-1.19.2:${project.controlling_version}")
    }

    // add internal libraries
    include fg.deobf('com.github.minecraftschurlimods:simplenetlib:1.19-1.0-SNAPSHOT') {
        jarJar.ranged(it, '[1.19-1.0-SNAPSHOT,)')
    }
    include fg.deobf('com.github.minecraftschurlimods:codeclib:1.19-1.0-SNAPSHOT') {
        jarJar.ranged(it, '[1.19-1.0-SNAPSHOT,)')
    }
    include fg.deobf('com.github.minecraftschurlimods:betterkeybindlib:1.19-1.1-SNAPSHOT') {
        jarJar.ranged(it, '[1.19-1.1-SNAPSHOT,)')
    }
    include fg.deobf('com.github.minecraftschurlimods:betterhudlib:1.19-1.0-SNAPSHOT') {
        jarJar.ranged(it, '[1.19-1.0-SNAPSHOT,)')
    }
    modAPI fg.deobf('com.github.minecraftschurlimods:easydatagenlib:1.19.2-1.1.1-SNAPSHOT')
    datagenLibrary fg.deobf('com.github.minecraftschurlimods:easydatagenlib:1.19.2-1.1.1-SNAPSHOT')
    datagenLibrary fg.deobf('com.github.minecraftschurlimods:patchouli_datagen-forge-1.19:1.0-SNAPSHOT')

    implementation sourceSets.api.output

    dataImplementation sourceSets.api.output
    dataImplementation sourceSets.main.output

    testImplementation sourceSets.api.output
    testImplementation sourceSets.main.output

    library 'org.jetbrains:annotations:23.0.0'
}

minecraft {
    mappings project.mappings_channel, project.mappings_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            ideaModule "${project.name.replace(' ', '_')}.main"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
                source sourceSets.test as SourceSet
            }
        }
        server {
            ideaModule "${project.name.replace(' ', '_')}.main"
            singleInstance true
            property 'forge.logging.markers', 'REGISTRIES'
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
            }
        }
        data {
            ideaModule "${project.name.replace(' ', '_')}.data"
            singleInstance true
            setForceExit false // To allow integration tests to run in CI
            args '--mod', project.mod_id, '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/'), '--mixin.config', "${project.mod_id}_data.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
                source sourceSets.data as SourceSet
            }
        }
        gameTestServer {
            ideaModule "${project.name.replace(' ', '_')}.test"
            singleInstance true
            setForceExit false // To allow integration tests to run in CI
            jvmArg '-ea' // Enable assertions
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.enabledGameTestNamespaces', "${project.mod_id}"

            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
                source sourceSets.test as SourceSet
            }
        }
    }
    runs.configureEach {
        workingDirectory project.file("run/${it.name}") as File
        property 'forge.logging.console.level', 'debug'
        if (!System.getenv('GITHUB_ACTIONS')) {
            jvmArg '-XX:+AllowEnhancedClassRedefinition'
        }
    }
}

project.ext.issue_tracker_url = "https://github.com/${project.github}/issues"

processResources {
    //noinspection GroovyAccessibility
    Map<String, ?> buildProps = project.properties.clone()
    buildProps.values().removeIf { !it.getClass().isPrimitive() && !(it instanceof CharSequence) }
    inputs.properties buildProps

    filesMatching(['META-INF/mods.toml']) {
        expand buildProps
    }
    // minify json files
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
        }
    }
}

javadoc {
    source = sourceSets.api.allJava
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:all,-missing', '-public')
    options.tags = [
            'side:a:Side:',
            'apiNote:a:API Note:',
            'implSpec:a:Implementation Requirements:',
            'implNote:a:Implementation Note:'
    ]
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    archiveClassifier.set('slim')
    from sourceSets.main.output
    from sourceSets.api.output
    finalizedBy('reobfJar')
}

sourcesJar {
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

tasks.jarJar.configure {
    archiveClassifier.set('')
    from sourceSets.api.output
    finalizedBy('reobfJarJar')
}

tasks.register('apiJar', Jar) {
    dependsOn(apiClasses)
    archiveClassifier.set('api')
    from sourceSets.api.allSource
    from sourceSets.api.output
    finalizedBy('reobfJar')
}

tasks.register('deobfJar', Jar) {
    dependsOn(classes)
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

tasks.withType(Jar).configureEach {
    String extension = ''
    if (it.archiveClassifier.present) {
        extension = it.archiveClassifier.get()
        if (extension != '') {
            extension = '-' + extension
        }
    }
    from 'LICENSE.md'
    manifest {
        attributes([
                'Maven-Artifact'        : "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                'Specification-Title'   : archivesBaseName,
                'Specification-Vendor'  : "${project.vendor}",
                'Specification-Version' : '1',
                'Implementation-Title'  : "${archivesBaseName}${extension}",
                'Implementation-Version': "${project.mod_version}",
                'Implementation-Vendor' : "${project.vendor}",
                'Built-On-Java'         : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On'              : "${project.mc_version}-${project.forge_version}",
                'Timestamp'             : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'FMLModType'            : 'MOD'
        ])
    }

    exclude '**/*.psd'
    exclude '**/*.bbmodel'
}

artifacts {
    archives jar
    archives apiJar
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
    jarJar { classpath.from(sourceSets.main.compileClasspath) }
}

tasks.register('reobf') {
    dependsOn reobfJar
    dependsOn reobfApiJar
    dependsOn reobfJarJar
}

tasks.register('setupGitHubActions') {
    doLast {
        var output = new File(System.getenv('GITHUB_OUTPUT'))
        output << "modid=${project.mod_id}\n"
        output << "version=${project.version}\n"
        output << "mv_version=${project.mc_version}\n"
        output << "curse_project_id=${project.curse_project_id}\n"
        output << "modrinth_project_id=${project.modrinth_project_id}\n"
    }
}

idea {
    module {
        for (String exclude in ['run', 'out', 'libs']) {
            excludeDirs += file(exclude)
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

publishing {
    publications.create(project.archivesBaseName + 'ToMaven', MavenPublication) {
        artifacts = [apiJar, deobfJar]
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        from components.java
        jarJar.component(it)
        pom {
            name = project.mod_name
            url = project.mod_url
            packaging = 'jar'
            scm {
                connection = "scm:git:git://github.com/${project.github}.git"
                developerConnection = "scm:git:git@github.com:${project.github}.git"
                url = "https://github.com/${project.github}"
            }
            issueManagement {
                system = 'github'
                url = "https://github.com/${project.github}/issues"
            }
            organization {
                name = 'Minecraftschurli Mods'
                url = 'https://github.com/MinecraftschurliMods'
            }
            developers {
                developer {
                    id = 'minecraftschurli'
                    url = 'https://github.com/Minecraftschurli'
                    name = 'Minecraftschurli'
                    email = 'minecraftschurli@gmail.com'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/MinecraftschurliMods'
                    timezone = 'Europe/Vienna'
                }
                developer {
                    id = 'ichhabehunger54'
                    name = 'IchHabeHunger54'
                    url = 'https://github.com/IchHabeHunger54'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/MinecraftschurliMods'
                    timezone = 'Europe/Vienna'
                }
            }
            licenses {
                license {
                    name = '"Don\'t Be a Jerk" License'
                    url = "https://github.com/${rootProject.github}/blob/version/${project.mc_version}/LICENSE.md"
                    distribution = 'repo'
                }
            }
        }
    }
    repositories {
        maven {
            if (
            (System.getenv("MAVEN_USER") != null) &&
                    (System.getenv("MAVEN_PASSWORD") != null) &&
                    (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}

check {
    dependsOn editorconfigCheck
}

publish {
    dependsOn check
}

evaluationDependsOnChildren()

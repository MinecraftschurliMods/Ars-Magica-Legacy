import groovy.json.JsonOutput
import groovy.json.JsonSlurper

subprojects {
    if (project.name != 'Xplat') {
        evaluationDependsOn(':Xplat')
    }
    
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(rootProject.java_version)
            vendor = JvmVendorSpec.ADOPTOPENJDK
        }
        withSourcesJar()
        withJavadocJar()
    }

    version = mod_version

    if (System.getenv('RELEASE_TYPE') != null) {
        status = System.getenv('RELEASE_TYPE').toLowerCase()
        if (status != 'release') {
            if (status == 'snapshot') status = status.toUpperCase()
            version = "${version}-${status}"
        }
    } else {
        version = "${version}-SNAPSHOT"
    }

    archivesBaseName = "${mod_id}-${project.name.toLowerCase()}-${mc_version}"
    project.ext.mod_author = project.authors.split(',').join(', ')

    jar {
        from("LICENSE") {
            rename { "${it}_${mod_name_simple}" }
        }
        from("LICENSE.md") {
            rename { "${it.split('\\.')[0]}_${mod_name_simple}.md" }
        }
        manifest {
            mainAttributes([
                'Specification-Title'     : mod_name,
                'Specification-Vendor'    : mod_author,
                'Specification-Version'   : project.jar.archiveVersion,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_author,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Timestamp'               : System.currentTimeMillis(),
                'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On-Minecraft'      : mc_version,
                'LICENSE'                 : mod_license
            ])
        }
        exclude '**/*.psd'
        exclude '**/*.bbmodel'
    }
    
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = 'Sponge maven'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content {
                includeGroup 'org.spongepowered'
            }
        }
        maven {
            name = 'blamejared Maven'
            url = 'https://maven.blamejared.com'
            content {
                includeGroup 'com.blamejared.controlling'
                includeGroup 'vazkii.patchouli'
            }
        }
        maven {
            name = 'Minecraftschurli Maven'
            url = 'https://minecraftschurli.ddns.net/repository/maven-public/'
            content {
                includeGroup 'com.github.ichhabehunger54'
                includeGroup 'com.github.minecraftschurli'
            }
        }
        maven {
            name = 'Progwml6 Maven'
            url = 'https://dvs1.progwml6.com/files/maven/'
            content {
                includeGroup 'mezz.jei'
            }
        }
        maven {
            name = 'mcjty maven'
            url = "https://maven.k-4u.nl"
            content {
                includeGroup 'mcjty.theoneprobe'
            }
        }
        maven {
            name = 'theillusivec4 Maven'
            url = 'https://maven.theillusivec4.top/'
            content {
                includeGroup 'top.theillusivec4.curios'
            }
        }
        maven {
            name = 'ModMaven'
            url = 'https://modmaven.k-4u.nl'
        }
    }

    javadoc {
        options.encoding = 'UTF-8'
        options.tags = [
                'side:a:Side:',
                'apiNote:a:API Note:',
                'implSpec:a:Implementation Requirements:',
                'implNote:a:Implementation Note:'
        ]
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    project.ext.base_mc_version = mc_version.split('\\.')[0..2].join('.') + '.x'

    def replaceIn = ['META-INF/mods.toml', 'fabric.mod.json', 'pack.mcmeta']
    def replaceProperties = [
            'version'                : project.version,
            'mod_id'                 : project.mod_id,
            'mod_url'                : project.mod_url,
            'mod_name'               : project.mod_name,
            'mod_name_simple'        : project.mod_name_simple,
            'mod_group'              : project.mod_group,
            'mod_author'             : project.mod_author,
            'mod_credits'            : project.mod_credits,
            'mod_license'            : project.mod_license,
            'base_mc_version'        : base_mc_version,
            'java_version'           : rootProject.java_version,
            'fabric_loader_version'  : project.fabric_loader_version.split('\\.')[0..-1].join('.'),
            'mc_version_range'       : project.mc_version_range,
            'jei_version_range'      : project.jei_version_range,
            'forge_version_range'    : project.forge_version_range,
            'loader_version_range'   : project.loader_version_range,
            'curios_version_range'   : project.curios_version_range,
            'patchouli_version_range': project.patchouli_version_range,
            'issue_tracker_url'      : "https://github.com/${project.organisation}/${project.github_repository}/issues",
            'homepage_url'           : "https://github.com/${project.organisation}/${project.github_repository}#readme",
            'sources_url'            : "https://github.com/${project.organisation}/${project.github_repository}/tree/${base_mc_version}"
    ]

    processResources {
        inputs.properties replaceProperties

        filesMatching(replaceIn) {
            expand replaceProperties
        }
        // minify json files
        doLast {
            fileTree(dir: outputs.files.asPath, include: "**/*.json", excludes: ["fabric.mod.json"]).each {
                it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.release = rootProject.java_version as int
    }

    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }

    artifacts {
        archives jar
        //archives apiJar
        archives sourcesJar
        archives javadocJar
        //archives deobfJar
    }

    publishing {
        publications.create(project.archivesBaseName + 'ToMaven', MavenPublication) {
            //artifacts = [apiJar, deobfJar]
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            from components.java
            pom {
                name = project.mod_name
                url = project.mod_url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/${project.organisation}/${project.github_repository}.git"
                    developerConnection = "scm:git:git@github.com:${project.organisation}/${project.github_repository}.git"
                    url = "https://github.com/${project.organisation}/${project.github_repository}"
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/${project.organisation}/${project.github_repository}/issues"
                }
                organization {
                    name = "${project.organisation_name}"
                    url = "https://github.com/${project.organisation}"
                }
                developers {
                    project.authors.split(',').collect { author ->
                        developer {
                            id = author.toLowerCase()
                            name = author
                            url = "https://github.com/${author}"
                            organization = "${project.organisation_name}"
                            organizationUrl = "https://github.com/${project.organisation}"
                            timezone = 'Europe/Vienna'
                        }
                    }
                }
                licenses {
                    license {
                        name = mod_license
                        url = "https://github.com/${project.organisation}/${project.github_repository}/blob/${base_mc_version}/LICENSE.md"
                        distribution = 'repo'
                    }
                }
                withXml {
                    asNode().dependencies.dependency.each { dep ->
                        if (dep.version.last().value().last().contains('_mapped_')) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                if ((System.getenv("MAVEN_USER") != null) &&
                    (System.getenv("MAVEN_PASSWORD") != null) &&
                    (System.getenv("MAVEN_URL") != null)
                ) {
                    url System.getenv("MAVEN_URL")
                    credentials {
                        username System.getenv("MAVEN_USER")
                        password System.getenv("MAVEN_PASSWORD")
                    }
                } else {
                    url "$buildDir/repo"
                }
            }
        }
    }

    idea {
        module {
            for (String exclude in ['run', 'out', 'libs']) {
                excludeDirs += file(exclude)
            }
        }
    }

//    editorconfig {
//        excludes = ['**/run/**', '**/*.psd', '**/*.nbt', '**/out/**', '**/.idea/**', '**/*.ogg', '**/gradlew*', '**/*.bbmodel']
//        excludeNonSourceFiles = true
//    }
//
//    check {
//        dependsOn editorconfigCheck
//    }
//
//    publish {
//        dependsOn check
//    }
}

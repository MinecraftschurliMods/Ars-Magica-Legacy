import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.8', ext: 'pom'
        classpath group: 'org.apache.maven', name: 'maven-plugin-api', version: '3.8.1'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        //classpath "org.spongepowered:mixingradle:${project.mixingradle_version}" // Mixin is not on 1.17.1 yet
    }
}

plugins {
    id 'org.ec4j.editorconfig' version '0.0.3'
    id "org.ajoberstar.grgit" version "4.1.0"
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
//apply plugin: 'org.spongepowered.mixin' // Mixin is not on 1.17.1 yet
//=============================================

group = "${project.mod_group}"
version = "${project.mc_version}-${project.mod_version}"
archivesBaseName = "${project.mod_id}"

if (System.getenv('RELEASE_TYPE') != null) {
    if (System.getenv('RELEASE_TYPE') == 'snapshot') {
        version = "${version}+${grgit.head().abbreviatedId}"
    }
    status = System.getenv('RELEASE_TYPE')
}

java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    api {
        compileClasspath += configurations.getByName("minecraft")
    }
    main {
        resources {
            srcDirs += 'src/main/generated'
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    data {
        compileClasspath += configurations.getByName("minecraft")
        runtimeClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    dataCompile.extendsFrom(compile)
}

repositories {
    mavenCentral()
    maven {
        name = 'saps maven'
        url = 'https://maven.saps.dev/minecraft/'
    }
    maven {
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name = 'theillusivec4 Maven'
        url = 'https://maven.theillusivec4.top/'
    }
    maven {
        name = 'blamejared Maven'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.k-4u.nl'
    }
    flatDir {
        name = 'libs'
        dir 'libs'
    }
    mavenLocal()
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.mc_version}-${project.forge_version}"
    //annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor" // Mixin is not on 1.17.1 yet

    // jei for integration
    // jei is not on 1.17.1 yet (using self published to mavenLocal)
    compileOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}")

    // curios for additional inventory slots
    // curios is not on 1.17.1 yet
    //compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.mc_version}-${project.curios_version}:api")
    //runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.mc_version}-${project.curios_version}")

    // patchouli for the guide book (arcane compendium)
    // patchouli is not on 1.17.1 yet
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}")

    // ftb library for in-game config gui
    compileOnly fg.deobf("dev.ftb.mods:ftb-library-forge:${project.ftb_library_version}")

    apiCompileOnly 'org.jetbrains:annotations:21.0.1'
    dataCompileOnly 'org.jetbrains:annotations:21.0.1'
    compileOnly 'org.jetbrains:annotations:21.0.1'
}

minecraft {
    mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"

    runs {
        client {
            workingDirectory project.file('run/client') as File
            ideaModule "${project.name.replace(' ', '_')}.main"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Mixin is not on 1.17.1 yet
            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            //arg "-mixin.config=arsmagicalegacy.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
            }
        }
        server {
            workingDirectory project.file('run/server') as File
            ideaModule "${project.name.replace(' ', '_')}.main"
            singleInstance true
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            // Mixin is not on 1.17.1 yet
            //property 'mixin.env.remapRefMap', 'true'
            //property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            //arg "-mixin.config=arsmagicalegacy.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
            }
        }
        data {
            workingDirectory project.file('run/data') as File
            ideaModule "${project.name.replace(' ', '_')}.data"
            singleInstance true
            property 'forge.logging.console.level', 'debug'
            args '--mod', project.mod_id, '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
                source sourceSets.data as SourceSet
            }
        }
    }
}

/*mixin {
    add sourceSets.main, "arsmagicalegacy.refmap.json"
}*/// Mixin is not on 1.17.1 yet

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version,
                'mod_id': project.mod_id,
                'mod_name': project.name,
                'mod_url': project.url,
                'mod_author': project.author,
                //'patchouli_version_range': project.patchouli_version_range,// patchouli is not on 1.17.1 yet
                'loader_version_range': project.loader_version_range,
                'forge_version_range': project.forge_version_range,
                'mc_version_range': project.mc_version_range/*,
                'mod_description': project.mod_description,
                'mod_icon': mod_icon*/
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
        }
    }
}

javadoc {
    source sourceSets.api.allJava
    options.encoding = 'UTF-8'
    options.tags = [
            'side:a:Side:',
            'apiNote:a:API Note:',
            'implSpec:a:Implementation Requirements:',
            'implNote:a:Implementation Note:'
    ]
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
    finalizedBy('reobfJar')
}

sourcesJar {
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    archiveClassifier.set('api')
    from sourceSets.api.allSource
    from sourceSets.api.output
}

task deobfJar(type: Jar) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

tasks.withType(Jar).configureEach {
    String extension = ''
    if (it.archiveClassifier.present) {
        extension = it.archiveClassifier.get()
        if (extension != '') {
            extension = '-' + extension
        }
    }
    manifest {
        mainAttributes(
                'Maven-Artifact': "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                'Specification-Title': archivesBaseName,
                'Specification-Vendor': "${project.vendor}",
                'Specification-Version': '1',
                'Implementation-Title': "${archivesBaseName}${extension}",
                'Implementation-Version': "${project.mod_version}",
                'Implementation-Vendor': "${project.vendor}",
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}",
                'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Git-Commit': "${grgit.head().abbreviatedId}",
                'Git-Branch': "${grgit.branch.current().fullName.split('/').drop(2).join('/')}",
                'FMLModType': 'MOD'
        )
    }
}

artifacts {
    archives jar
    archives apiJar
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
    dependsOn reobfJar
    dependsOn reobfApiJar
}

task setupGithubActions() {
    doLast {
        println "##[set-output name=modid;]${project.mod_id}"
        if(project.hasProperty('curse_project_id')) {
            println "##[set-output name=project_id;]${project.curse_project_id}"
            if(project.hasProperty('curse_title')) {
                println "##[set-output name=curse_title;]${project.curse_title}"
            }
            println "##[set-output name=curse_versions;]${project.curse_versions}"
            if(project.hasProperty('curse_relations')) {
                println "##[set-output name=curse_relations;]${project.curse_relations}"
            }
        }
        println "##[set-output name=version;]${project.version}"
    }
}

idea {
    module {
        for (String exclude in ['run', 'out', 'libs']) {
            excludeDirs += file(exclude)
        }
    }
}

publishing {
    publications.create(project.archivesBaseName+'-maven', MavenPublication) {
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        from components.java
        pom {
            name = project.name
            url = project.url
            packaging = 'jar'
            scm {
                connection = "scm:git:git://github.com/${project.github}.git"
                developerConnection = "scm:git:git@github.com:${project.github}.git"
                url = "https://github.com/${project.github}"
            }
            issueManagement {
                system = 'github'
                url = "https://github.com/${project.github}.git/issues"
            }
            organization {
                name = 'Minecraftschurli Mods'
                url = 'https://github.com/Minecraftschurli'
            }
            developers {
                developer {
                    id = 'minecraftschurli'
                    name = 'Minecraftschurli'
                    email = 'minecraftschurli@gmail.com'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/Minecraftschurli'
                    timezone = 'Europe/Vienna'
                }
            }
            licenses {
                license {
                    name = '"Don\'t Be a Jerk" License'
                    url = 'https://github.com/Minecraftschurli/Ars-Magica-Legacy/blob/version/1.17.1/LICENSE.md'
                    distribution = 'repo'
                }
            }
            withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(dep.version.last().value().last().contains('_mapped_')) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (
                (System.getenv("MAVEN_USER") != null) &&
                (System.getenv("MAVEN_PASSWORD") != null) &&
                (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}

check {
    dependsOn editorconfigCheck
}

publish {
    dependsOn check
}

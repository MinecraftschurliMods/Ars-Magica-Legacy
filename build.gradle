//file:noinspection GroovyAssignabilityCheck
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.8', ext: 'pom'
        classpath group: 'org.apache.maven', name: 'maven-plugin-api', version: '3.8.1'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: "${project.librarian_version}"
        classpath "org.spongepowered:mixingradle:${project.mixingradle_version}"
    }
}

plugins {
    id 'org.ec4j.editorconfig' version '0.0.3'
    id 'org.ajoberstar.grgit'
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
//=============================================
def grgit = Grgit.open(currentDir: project.projectDir)

mixin {
    add sourceSets.main, "arsmagicalegacy.refmap.json"
}

group = "${project.mod_group}"
version = "${project.mc_version}-${project.mod_version}"
archivesBaseName = "${project.mod_id}"

if (System.getenv('RELEASE_TYPE') != null) {
    status = System.getenv('RELEASE_TYPE')
    switch (status) {
        case 'snapshot':
            version = "${version}+${grgit.head().abbreviatedId}"
            break
        case 'alpha':
        case 'beta':
        case 'final':
            version = "${version}-${status}"
            break
    }
}

java {
    withSourcesJar()
    withJavadocJar()

    toolchain {
        languageVersion = JavaLanguageVersion.of(project.java_version)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    api.resources.srcDirs = []
    main.resources {
        srcDirs += 'src/main/generated'
        exclude '.cache'
    }
    data.resources.srcDirs = []
    test.resources.srcDirs = []
}

configurations {
    library
    modAPI
    runtimeMod
    datagenLibrary {
        canBeConsumed = false
        canBeResolved = true
        transitive = false
    }
    include {
        canBeConsumed = false
        canBeResolved = true
        transitive = false
    }

    apiCompileOnly.extendsFrom(library)
    compileOnly.extendsFrom(library)
    dataCompileOnly.extendsFrom(library)

    apiCompileOnly.extendsFrom(modAPI)
    compileOnly.extendsFrom(modAPI)
    dataCompileOnly.extendsFrom(modAPI)

    runtimeOnly.extendsFrom(runtimeMod)
    dataRuntimeOnly.extendsFrom(runtimeMod)

    implementation.extendsFrom(include)
    dataImplementation.extendsFrom(include)

    dataImplementation.extendsFrom(datagenLibrary)

    apiCompileClasspath.extendsFrom(minecraft)
    dataCompileClasspath.extendsFrom(minecraft)
    dataRuntimeClasspath.extendsFrom(minecraft)
    testCompileClasspath.extendsFrom(minecraft)
    testRuntimeClasspath.extendsFrom(minecraft)
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = 'Sponge maven'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'Minecraftschurli Maven'
        url = 'https://minecraftschurli.ddns.net/repository'
    }
    maven {
        name = 'saps Maven'
        url = 'https://maven.saps.dev/minecraft/'
    }
    maven {
        name = 'Progwml6 Maven'
        url = 'https://dvs1.progwml6.com/files/maven/'
    }
    maven {
        name = 'theillusivec4 Maven'
        url = 'https://maven.theillusivec4.top/'
    }
    maven {
        name = 'blamejared Maven'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = 'CurseForge'
        url = 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        name = 'ModMaven'
        url = 'https://modmaven.k-4u.nl'
    }
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.mc_version}-${project.forge_version}"
    annotationProcessor group: 'org.spongepowered', name: 'mixin', version: project.mixin_version, classifier: 'processor'

    // jei for integration
    modAPI fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}:api")
    runtimeMod fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}")

    // curios for additional inventory slots
    modAPI fg.deobf("top.theillusivec4.curios:curios-forge:${project.mc_version}-${project.curios_version}:api")
    runtimeMod fg.deobf("top.theillusivec4.curios:curios-forge:${project.mc_version}-${project.curios_version}")

    // patchouli for the guide book (arcane compendium)
    modAPI fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}:api")
    runtimeMod fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}")

    // ftb library for in-game config gui
    //modAPI fg.deobf("dev.ftb.mods:ftb-library-forge:${project.ftb_library_version}")
    //runtimeMod fg.deobf("dev.ftb.mods:ftb-library-forge:${project.ftb_library_version}")

    //runtimeMod fg.deobf("com.github.ichhabehunger54:potionbundles:${project.mc_version}-${project.potionbundles_version}")

    // add internal libraries
    var projects = subprojects.collect {it.path }
    if (projects.contains(':projects:easyimclib')) {
        include project(path: ':projects:easyimclib', configuration: 'deobfJar')
    } else {
        include fg.deobf('com.github.minecraftschurli:easyimclib:1.17.1-1.0')
    }
    if (projects.contains(':projects:simplenetlib')) {
        include project(path: ':projects:simplenetlib', configuration: 'deobfJar')
    } else {
        include fg.deobf('com.github.minecraftschurli:simplenetlib:1.17.1-1.0')
    }
    if (projects.contains(':projects:patchouli_datagen')) {
        datagenLibrary project(path: ':projects:patchouli_datagen', configuration: 'deobfJar')
    } else {
        datagenLibrary fg.deobf('com.github.minecraftschurli:patchouli_datagen:1.17.1-1.0')
    }

    implementation sourceSets.api.output

    dataImplementation sourceSets.api.output
    dataImplementation sourceSets.main.output

    testImplementation sourceSets.api.output
    testImplementation sourceSets.main.output

    library 'org.jetbrains:annotations:22.0.0'
}

minecraft {
    mappings project.mappings_channel, project.mappings_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory project.file('run/client') as File
            ideaModule "${project.name.replace(' ', '_')}.main"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "--mixin.config=arsmagicalegacy.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
            }
        }
        server {
            workingDirectory project.file('run/server') as File
            ideaModule "${project.name.replace(' ', '_')}.main"
            singleInstance true
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "--mixin.config=arsmagicalegacy.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
            }
        }
        data {
            workingDirectory project.file('run/data') as File
            ideaModule "${project.name.replace(' ', '_')}.data"
            singleInstance true
            property 'forge.logging.console.level', 'debug'
            args '--mod', project.mod_id, '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
            mods.create("${project.mod_id}") {
                source sourceSets.api as SourceSet
                source sourceSets.main as SourceSet
                source sourceSets.data as SourceSet
            }
        }
    }
}

def replaceIn = ['META-INF/mods.toml']
def replaceProperties = [
        'version': project.version,
        'mod_id': project.mod_id,
        'mod_name': project.mod_name,
        'mod_url': project.mod_url,
        'mod_author': project.mod_author,
        'mod_credits': project.mod_credits,
        'patchouli_version_range': project.patchouli_version_range,
        'loader_version_range': project.loader_version_range,
        'forge_version_range': project.forge_version_range,
        'mc_version_range': project.mc_version_range
]

processResources {
    inputs.properties replaceProperties

    filesMatching(replaceIn) {
        expand replaceProperties
    }
    // minify json files
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
        }
    }
}

javadoc {
    source sourceSets.api.allJava
    options.encoding = 'UTF-8'
    options.tags = [
            'side:a:Side:',
            'apiNote:a:API Note:',
            'implSpec:a:Implementation Requirements:',
            'implNote:a:Implementation Note:'
    ]
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
    finalizedBy('reobfJar')
}

sourcesJar {
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task apiJar(type: Jar, dependsOn: apiClasses) {
    archiveClassifier.set('api')
    from sourceSets.api.allSource
    from sourceSets.api.output
    finalizedBy('reobfJar')
}

task deobfJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

tasks.withType(Jar).configureEach {
    String extension = ''
    if (it.archiveClassifier.present) {
        extension = it.archiveClassifier.get()
        if (extension != '') {
            extension = '-' + extension
        }
    }
    manifest {
        mainAttributes([
                'Maven-Artifact': "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                'Specification-Title': archivesBaseName,
                'Specification-Vendor': "${project.vendor}",
                'Specification-Version': '1',
                'Implementation-Title': "${archivesBaseName}${extension}",
                'Implementation-Version': "${project.mod_version}",
                'Implementation-Vendor': "${project.vendor}",
                'Built-On-Java': "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                'Built-On': "${project.mc_version}-${project.forge_version}",
                'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Git-Commit': "${grgit.head().abbreviatedId}",
                'Git-Branch': "${grgit.branch.current().fullName.split('/').drop(2).join('/')}",
                'FMLModType': 'MOD'
        ])
    }

    exclude '**/*.psd'
}

artifacts {
    archives jar
    archives apiJar
    archives sourcesJar
    archives javadocJar
    archives deobfJar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

task reobf {
    dependsOn reobfJar
    dependsOn reobfApiJar
}

task setupGithubActions() {
    doLast {
        println "##[set-output name=modid;]${project.mod_id}"
        if(project.hasProperty('curse_project_id')) {
            println "##[set-output name=project_id;]${project.curse_project_id}"
            if(project.hasProperty('curse_title')) {
                println "##[set-output name=curse_title;]${project.curse_title}"
            }
            println "##[set-output name=curse_versions;]${project.curse_versions}"
            if(project.hasProperty('curse_relations')) {
                println "##[set-output name=curse_relations;]${project.curse_relations}"
            }
        }
        println "##[set-output name=version;]${project.version}"
    }
}

idea {
    module {
        for (String exclude in ['run', 'out', 'libs']) {
            excludeDirs += file(exclude)
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    publications.create(project.archivesBaseName+'ToMaven', MavenPublication) {
        artifacts = [apiJar, deobfJar]
        groupId = project.group
        artifactId = project.archivesBaseName
        version = project.version
        from components.java
        pom {
            name = project.mod_name
            url = project.mod_url
            packaging = 'jar'
            scm {
                connection = "scm:git:git://github.com/${project.github}.git"
                developerConnection = "scm:git:git@github.com:${project.github}.git"
                url = "https://github.com/${project.github}"
            }
            issueManagement {
                system = 'github'
                url = "https://github.com/${project.github}.git/issues"
            }
            organization {
                name = 'Minecraftschurli Mods'
                url = 'https://github.com/MinecraftschurliMods'
            }
            developers {
                developer {
                    id = 'minecraftschurli'
                    url = 'https://github.com/Minecraftschurli'
                    name = 'Minecraftschurli'
                    email = 'minecraftschurli@gmail.com'
                    organization = 'Minecraftschurli Mods'
                    organizationUrl = 'https://github.com/MinecraftschurliMods'
                    timezone = 'Europe/Vienna'
                }
                developer {
                    id = 'ichhabehunger54'
                    name = 'IchHabeHunger54'
                    url = 'https://github.com/IchHabeHunger54'
                    timezone = 'Europe/Vienna'
                }
            }
            licenses {
                license {
                    name = '"Don\'t Be a Jerk" License'
                    url = "https://github.com/${rootProject.github}/blob/version/${project.mc_version}/LICENSE.md"
                    distribution = 'repo'
                }
            }
            withXml {
                asNode().dependencies.dependency.each { dep ->
                    if(dep.version.last().value().last().contains('_mapped_')) {
                        assert dep.parent().remove(dep)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (
                (System.getenv("MAVEN_USER") != null) &&
                (System.getenv("MAVEN_PASSWORD") != null) &&
                (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}

check {
    dependsOn editorconfigCheck
}

publish {
    dependsOn check
}

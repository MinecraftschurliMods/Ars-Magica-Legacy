//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: "${project.forgegradle_version}", changing: true
        classpath "org.spongepowered:mixingradle:${project.mixingradle_version}"
    }
}

plugins {
    id 'org.ec4j.editorconfig' version '0.0.3'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
//=============================================

apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'

group = "${project.mod_group}"
version = "${project.mc_version}-${project.mod_version}"
archivesBaseName = "${project.mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_version)

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    api {
        compileClasspath += configurations.getByName("minecraft")
    }
    main {
        resources {
            srcDirs += 'src/main/generated'
            exclude '.cache'
        }
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
    data {
        compileClasspath += configurations.getByName("minecraft")
        runtimeClasspath += configurations.getByName("minecraft")
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
    dataCompile.extendsFrom(compile)
}

repositories {
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "theillusivec4 Maven"
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        name = 'blamejared Maven'
        url = 'https://maven.blamejared.com'
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    annotationProcessor "org.spongepowered:mixin:${project.mixin_version}:processor"

    compileOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}")

    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.mc_version}-${project.curios_version}:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${project.mc_version}-${project.curios_version}")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${project.patchouli_version}")

    apiCompile 'org.jetbrains:annotations:21.0.1'
    dataCompile 'org.jetbrains:annotations:21.0.1'
    compile 'org.jetbrains:annotations:21.0.1'
}

minecraft {
    mappings channel: "${project.mappings_channel}", version: "${project.mappings_version}"

    runs {
        client {
            workingDirectory project.file('run/client')
            ideaModule "${project.name}.main"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "-mixin.config=arsmagicalegacy.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.main
                source sourceSets.api
            }
        }

        server {
            workingDirectory project.file('run/server')
            ideaModule "${project.name}.main"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            arg "-mixin.config=arsmagicalegacy.mixins.json"
            mods.create("${project.mod_id}") {
                source sourceSets.main
                source sourceSets.api
            }
        }

        data {
            workingDirectory project.file('run/data')
            ideaModule "${project.name}.data"
            property 'forge.logging.console.level', 'debug'
            args '--mod', project.mod_id.toString(), '--all', '--output', file('src/main/generated/'), '--existing', file('src/main/resources/')
            mods.create("${project.mod_id}") {
                source sourceSets.main
                source sourceSets.api
                source sourceSets.data
            }
        }
    }
}

mixin {
    add sourceSets.main, "arsmagicalegacy.refmap.json"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version,
                'mod_id': project.mod_id,
                'mod_name': project.name,
                'mod_url': project.url,
                'mod_author': project.author,
                'patchouli_version_range': project.patchouli_version_range,
                'loader_version_range': project.loader_version_range,
                'forge_version_range': project.forge_version_range,
                'mc_version_range': project.mc_version_range/*,
                'mod_description': project.mod_description,
                'mod_icon': mod_icon*/
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

javadoc {
    source = sourceSets.api.allJava
    options.tags = [ "side:a:Side:" ]
}

jar {
    from sourceSets.main.output
    from sourceSets.api.output
}

task sourceJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('api')
    description = 'Creates a JAR containing the whole api code.'
    from sourceSets.api.allSource
    from sourceSets.api.output
}

task printSourceSetInformation(){
    doLast{
        sourceSets.each { srcSet ->
            println "[${srcSet.name}]"
            print "-->Source directories: ${srcSet.allJava.srcDirs}\n"
            print "-->Output directories: ${srcSet.output.classesDirs.files}\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
            print "-->Runtime classpath:\n"
            srcSet.runtimeClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}

tasks.withType(Jar).configureEach {
    String extension = ''
    if (it.archiveClassifier.present) {
        extension = it.archiveClassifier.get()
        if (extension != '') {
            extension = '-' + extension
        }
    }
    manifest {
        mainAttributes(
                "Maven-Artifact": "${project.mod_group}:${project.archivesBaseName}:${project.version}",
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "${project.author}",
                "Specification-Version": "1",
                "Implementation-Title": "${archivesBaseName}${extension}",
                "Implementation-Version": "${project.mod_version}",
                "Implementation-Vendor": "${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                "Built-On": "${project.mc_version}-${project.forge_version}"
        )
    }
}

jar.finalizedBy('reobfJar')

artifacts {
    archives jar
    archives apiJar
    archives sourceJar
}

task setupGithubActions() {
    doLast {
        println("##[set-output name=modid;]${project.mod_id}")
        if(project.hasProperty('curse_project_id')) {
            println("##[set-output name=project_id;]${project.curse_project_id}")
            if(project.hasProperty('curse_title')) {
                println("##[set-output name=curse_title;]${project.curse_title}")
            }
            println("##[set-output name=curse_versions;]${project.curse_versions}")
            if(project.hasProperty('curse_relations')) {
                println("##[set-output name=curse_relations;]${project.curse_relations}")
            }
        }
        println("##[set-output name=version;]${project.version}")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact sourceJar {
                classifier 'sources'
            }
            artifact apiJar {
                classifier 'api'
            }
            pom {
                name = project.name
                url = project.url
                packaging = 'jar'
                scm {
                    connection = "scm:git:git://github.com/${project.github}.git"
                    developerConnection = "scm:git:git@github.com:${project.github}.git"
                    url = "https://github.com/${project.github}"
                }
                issueManagement {
                    system = 'github'
                    url = "https://github.com/${project.github}.git/issues"
                }
                organization {
                    name = 'Minecraftschurli Mods'
                    url = 'https://github.com/Minecraftschurli'
                }
            }
        }
    }
    repositories {
        maven {
            if (
                (System.getenv("MAVEN_USER") != null) &&
                (System.getenv("MAVEN_PASSWORD") != null) &&
                (System.getenv("MAVEN_URL") != null)
            ) {
                url System.getenv("MAVEN_URL")
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASSWORD")
                }
            } else {
                url "$buildDir/repo"
            }
        }
    }
}

package com.github.minecraftschurlimods.arsmagicalegacy.client.model.entity;

import com.github.minecraftschurlimods.arsmagicalegacy.api.ArsMagicaAPI;
import com.github.minecraftschurlimods.arsmagicalegacy.common.entity.IceGuardian;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.geom.ModelLayerLocation;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.builders.LayerDefinition;
import net.minecraft.client.model.geom.builders.MeshDefinition;
import net.minecraft.client.model.geom.builders.PartDefinition;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.Mth;

public class IceGuardianModel extends EntityModel<IceGuardian> {
    public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(ArsMagicaAPI.MOD_ID, "ice_guardian"), "main");
    private final ModelPart rightEye;
    private final ModelPart leftEye;
    private final ModelPart topHead;
    private final ModelPart middleHead;
    private final ModelPart bottomHead;
    private final ModelPart topBody;
    private final ModelPart middleBody;
    private final ModelPart bottomBody;
    private final ModelPart core1;
    private final ModelPart core2;
    private final ModelPart core3;
    private final ModelPart cube1;
    private final ModelPart cube2;
    private final ModelPart cube3;
    private final ModelPart cube4;
    private final ModelPart rod1;
    private final ModelPart rod2;
    private final ModelPart rod3;
    private final ModelPart rod4;
    private final ModelPart rightShoulder;
    private final ModelPart rightCore1;
    private final ModelPart rightCore2;
    private final ModelPart rightCore3;
    private final ModelPart rightArm;
    private final ModelPart rightHand;
    private final ModelPart rightOuterFingers;
    private final ModelPart rightInnerFingers;
    private final ModelPart rightThumb;
    private final ModelPart leftShoulder;
    private final ModelPart leftCore1;
    private final ModelPart leftCore2;
    private final ModelPart leftCore3;
    private final ModelPart leftArm;
    private final ModelPart leftHand;
    private final ModelPart leftOuterFingers;
    private final ModelPart leftInnerFingers;
    private final ModelPart leftThumb;

    public IceGuardianModel(ModelPart root) {
        rightEye = root.getChild("right_eye");
        leftEye = root.getChild("left_eye");
        topHead = root.getChild("top_head");
        middleHead = root.getChild("middle_head");
        bottomHead = root.getChild("bottom_head");
        topBody = root.getChild("top_body");
        middleBody = root.getChild("middle_body");
        bottomBody = root.getChild("bottom_body");
        core1 = root.getChild("core1");
        core2 = root.getChild("core2");
        core3 = root.getChild("core3");
        cube1 = root.getChild("cube1");
        cube2 = root.getChild("cube2");
        cube3 = root.getChild("cube3");
        cube4 = root.getChild("cube4");
        rod1 = root.getChild("rod1");
        rod2 = root.getChild("rod2");
        rod3 = root.getChild("rod3");
        rod4 = root.getChild("rod4");
        rightShoulder = root.getChild("right_shoulder");
        rightCore1 = root.getChild("right_core1");
        rightCore2 = root.getChild("right_core2");
        rightCore3 = root.getChild("right_core3");
        rightArm = root.getChild("right_arm");
        rightHand = root.getChild("right_hand");
        rightOuterFingers = root.getChild("right_outer_fingers");
        rightInnerFingers = root.getChild("right_inner_fingers");
        rightThumb = root.getChild("right_thumb");
        leftShoulder = root.getChild("left_shoulder");
        leftCore1 = root.getChild("left_core1");
        leftCore2 = root.getChild("left_core2");
        leftCore3 = root.getChild("left_core3");
        leftArm = root.getChild("left_arm");
        leftHand = root.getChild("left_hand");
        leftOuterFingers = root.getChild("left_outer_fingers");
        leftInnerFingers = root.getChild("left_inner_fingers");
        leftThumb = root.getChild("left_thumb");
    }

    public static LayerDefinition createBodyLayer() {
        MeshDefinition md = new MeshDefinition();
        PartDefinition pd = md.getRoot();
        ModelUtil.addCube(pd, "right_eye", 0, 24, 2, -6, -4.5f, 2, 1, 9, 0, -15, 0);
        ModelUtil.addCube(pd, "left_eye", 0, 24, -4, -6, -4.5f, 2, 1, 9, 0, -15, 0);
        ModelUtil.addCube(pd, "top_head", 0, 0, -5, -10, -5, 10, 4, 10, 0, -15, 0);
        ModelUtil.addCube(pd, "middle_head", 0, 14, -5, -6, -3, 10, 2, 8, 0, -15, 0);
        ModelUtil.addCube(pd, "bottom_head", 0, 0, -5, -4, -5, 10, 4, 10, 0, -15, 0);
        ModelUtil.addCube(pd, "top_body", 0, 34, -7, 2.5f, -5.5f, 14, 7, 11, 0, -9.5f, -6, (float) (Math.PI / 2), 0, 0);
        ModelUtil.addCube(pd, "middle_body", 50, 0, -3, -3, -5, 8, 8, 10, 0, -4, 0, 0, 0, (float) (Math.PI / 4));
        ModelUtil.addCube(pd, "bottom_body", 50, 40, -2, -6, -4, 8, 8, 8, 0, 4, 0, 0, 0, -(float) (Math.PI / 4));
        ModelUtil.addCube(pd, "core1", 94, 32, -3, -3, -3, 6, 6, 6, 0, 15, 0);
        ModelUtil.addCube(pd, "core2", 94, 32, -3, -3, -3, 6, 6, 6, 0, 15, 0);
        ModelUtil.addCube(pd, "core3", 94, 32, -3, -3, -3, 6, 6, 6, 0, 15, 0);
        ModelUtil.addCube(pd, "cube1", 118, 14, -1.5f, -1.5f, -9, 3, 3, 1, 0, 15, 0);
        ModelUtil.addCube(pd, "cube2", 118, 14, -1.5f, -1.5f, -9, 3, 3, 1, 0, 15, 0, 0, (float) (Math.PI / 2), 0);
        ModelUtil.addCube(pd, "cube3", 118, 14, -1.5f, -1.5f, -9, 3, 3, 1, 0, 15, 0, 0, (float) Math.PI, 0);
        ModelUtil.addCube(pd, "cube4", 118, 14, -1.5f, -1.5f, -9, 3, 3, 1, 0, 15, 0, 0, -(float) (Math.PI / 2), 0);
        ModelUtil.addCube(pd, "rod1", 118, 0, -10, -6, -1, 2, 12, 2, 0, 15, 0, 0, -(float) (Math.PI / 4), 0);
        ModelUtil.addCube(pd, "rod2", 118, 0, -10, -6, -1, 2, 12, 2, 0, 15, 0, 0, (float) (Math.PI / 4), 0);
        ModelUtil.addCube(pd, "rod3", 118, 0, -10, -6, -1, 2, 12, 2, 0, 15, 0, 0, (float) (3 * Math.PI / 4), 0);
        ModelUtil.addCube(pd, "rod4", 118, 0, -10, -6, -1, 2, 12, 2, 0, 15, 0, 0, -(float) (3 * Math.PI / 4), 0);
        ModelUtil.addCube(pd, "right_shoulder", 50, 18, -5, -5, -6, 10, 10, 12, -7, -8, 0, 0, 0, (float) (Math.PI / 4));
        ModelUtil.addMirroredCube(pd, "right_core1", 22, 24, -2, -2, -2, 4, 4, 4, 13, -14.5f, 0);
        ModelUtil.addMirroredCube(pd, "right_core2", 22, 24, -2, -2, -2, 4, 4, 4, 13, -14.5f, 0);
        ModelUtil.addMirroredCube(pd, "right_core3", 22, 24, -2, -2, -2, 4, 4, 4, 13, -14.5f, 0);
        ModelUtil.addCube(pd, "right_arm", 94, 0, 17, 0, -3, 6, 26, 6, 0, -10, 0);
        ModelUtil.addMirroredCube(pd, "right_hand", 82, 44, 17, 27, -2, 6, 1, 5, 0, -10, 0);
        ModelUtil.addMirroredCube(pd, "right_outer_fingers", 104, 44, 22, 26, -2, 1, 1, 5, 0, -10, 0);
        ModelUtil.addMirroredCube(pd, "right_inner_fingers", 104, 44, 17, 26, -2, 1, 1, 5, 0, -10, 0);
        ModelUtil.addMirroredCube(pd, "right_thumb", 82, 50, 17, 26, -3, 3, 2, 1, 0, -10, 0);
        ModelUtil.addCube(pd, "left_shoulder", 50, 18, -5, -5, -6, 10, 10, 12, 7, -8, 0, 0, 0, -(float) (Math.PI / 4));
        ModelUtil.addCube(pd, "left_core1", 22, 24, -2, -2, -2, 4, 4, 4, -13, -14.5f, 0);
        ModelUtil.addCube(pd, "left_core2", 22, 24, -2, -2, -2, 4, 4, 4, -13, -14.5f, 0);
        ModelUtil.addCube(pd, "left_core3", 22, 24, -2, -2, -2, 4, 4, 4, -13, -14.5f, 0);
        ModelUtil.addCube(pd, "left_arm", 94, 0, -23, 0, -3, 6, 26, 6, 0, -10, 0);
        ModelUtil.addCube(pd, "left_hand", 82, 44, -23, 27, -2, 6, 1, 5, 0, -10, 0);
        ModelUtil.addCube(pd, "left_outer_fingers", 104, 44, -23, 26, -2, 1, 1, 5, 0, -10, 0);
        ModelUtil.addCube(pd, "left_inner_fingers", 104, 44, -18, 26, -2, 1, 1, 5, 0, -10, 0);
        ModelUtil.addCube(pd, "left_thumb", 82, 50, -20, 26, -3, 3, 2, 1, 0, -10, 0);
        return LayerDefinition.create(md, 128, 64);
    }

    @Override
    public void setupAnim(IceGuardian entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        float pitch = headPitch * (float) Math.PI / 180f;
        float yaw = netHeadYaw * (float) Math.PI / 180f;
        rightEye.xRot = pitch;
        rightEye.yRot = yaw;
        leftEye.xRot = pitch;
        leftEye.yRot = yaw;
        topHead.xRot = pitch;
        topHead.yRot = yaw;
        middleHead.xRot = pitch;
        middleHead.yRot = yaw;
        bottomHead.xRot = pitch;
        bottomHead.yRot = yaw;
        float y = 45 * (Mth.cos(ageInTicks % 360 * (float) Math.PI / 45f) - Mth.cos((ageInTicks - 1) % 360 * (float) Math.PI / 45f));
        rightEye.y = -15 + y;
        leftEye.y = -15 + y;
        topHead.y = -15 + y;
        middleHead.y = -15 + y;
        bottomHead.y = -15 + y;
        topBody.y = -9.5f + y;
        middleBody.y = -4 + y;
        bottomBody.y = 4 + y;
        core1.y = 15 + y;
        core2.y = 15 + y;
        core3.y = 15 + y;
        cube1.y = 15 + y;
        cube2.y = 15 + y;
        cube3.y = 15 + y;
        cube4.y = 15 + y;
        rod1.y = 15 + y;
        rod2.y = 15 + y;
        rod3.y = 15 + y;
        rod4.y = 15 + y;
        rightShoulder.y = -8 + y;
        rightCore1.y = -14.5f + y;
        rightCore2.y = -14.5f + y;
        rightCore3.y = -14.5f + y;
        rightArm.y = -10 + y;
        rightHand.y = -10 + y;
        rightOuterFingers.y = -10 + y;
        rightInnerFingers.y = -10 + y;
        rightThumb.y = -10 + y;
        leftShoulder.y = -8 + y;
        leftCore1.y = -14.5f + y;
        leftCore2.y = -14.5f + y;
        leftCore3.y = -14.5f + y;
        leftArm.y = -10 + y;
        leftHand.y = -10 + y;
        leftOuterFingers.y = -10 + y;
        leftInnerFingers.y = -10 + y;
        leftThumb.y = -10 + y;
        core1.xRot = ageInTicks % 360 / 6f;
        core2.yRot = (ageInTicks + 120) % 360 / 6f;
        core3.zRot = (ageInTicks + 240) % 360 / 6f;
        rightCore1.xRot = ageInTicks % 360 / 4f;
        rightCore2.yRot = (ageInTicks + 120) % 360 / 4f;
        rightCore3.zRot = (ageInTicks + 240) % 360 / 4f;
        leftCore1.xRot = ageInTicks % 360 / 4f;
        leftCore2.yRot = (ageInTicks + 120) % 360 / 4f;
        leftCore3.zRot = (ageInTicks + 240) % 360 / 4f;
        float rot = (float) ((ageInTicks % 360) * Math.PI / 180);
        cube1.yRot = rot;
        cube2.yRot = -(float) (Math.PI / 2) + rot;
        cube3.yRot = -(float) Math.PI + rot;
        cube4.yRot = (float) (Math.PI / 2) + rot;
        rod1.yRot = (float) (3 * Math.PI / 4) + rot;
        rod2.yRot = -(float) (3 * Math.PI / 4) + rot;
        rod3.yRot = -(float) (Math.PI / 4) + rot;
        rod4.yRot = (float) (Math.PI / 4) + rot;
        float swing = Mth.cos(ageInTicks * 0.1f) * 0.05f + 0.05f;
        rightArm.zRot = -swing;
        rightHand.zRot = -swing;
        rightOuterFingers.zRot = -swing;
        rightInnerFingers.zRot = -swing;
        rightThumb.zRot = -swing;
        leftArm.zRot = swing;
        leftHand.zRot = swing;
        leftOuterFingers.zRot = swing;
        leftInnerFingers.zRot = swing;
        leftThumb.zRot = swing;
        boolean hasRight = entity.hasRightArm();
        rightArm.visible = hasRight;
        rightHand.visible = hasRight;
        rightOuterFingers.visible = hasRight;
        rightInnerFingers.visible = hasRight;
        rightThumb.visible = hasRight;
        boolean hasLeft = entity.hasLeftArm();
        leftArm.visible = hasLeft;
        leftHand.visible = hasLeft;
        leftOuterFingers.visible = hasLeft;
        leftInnerFingers.visible = hasLeft;
        leftThumb.visible = hasLeft;
    }

    @Override
    public void renderToBuffer(PoseStack poseStack, VertexConsumer buffer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
        rightEye.render(poseStack, buffer, packedLight, packedOverlay);
        leftEye.render(poseStack, buffer, packedLight, packedOverlay);
        topHead.render(poseStack, buffer, packedLight, packedOverlay);
        middleHead.render(poseStack, buffer, packedLight, packedOverlay);
        bottomHead.render(poseStack, buffer, packedLight, packedOverlay);
        topBody.render(poseStack, buffer, packedLight, packedOverlay);
        middleBody.render(poseStack, buffer, packedLight, packedOverlay);
        bottomBody.render(poseStack, buffer, packedLight, packedOverlay);
        core1.render(poseStack, buffer, packedLight, packedOverlay);
        core2.render(poseStack, buffer, packedLight, packedOverlay);
        core3.render(poseStack, buffer, packedLight, packedOverlay);
        cube1.render(poseStack, buffer, packedLight, packedOverlay);
        cube2.render(poseStack, buffer, packedLight, packedOverlay);
        cube3.render(poseStack, buffer, packedLight, packedOverlay);
        cube4.render(poseStack, buffer, packedLight, packedOverlay);
        rod1.render(poseStack, buffer, packedLight, packedOverlay);
        rod2.render(poseStack, buffer, packedLight, packedOverlay);
        rod3.render(poseStack, buffer, packedLight, packedOverlay);
        rod4.render(poseStack, buffer, packedLight, packedOverlay);
        rightShoulder.render(poseStack, buffer, packedLight, packedOverlay);
        rightCore1.render(poseStack, buffer, packedLight, packedOverlay);
        rightCore2.render(poseStack, buffer, packedLight, packedOverlay);
        rightCore3.render(poseStack, buffer, packedLight, packedOverlay);
        rightArm.render(poseStack, buffer, packedLight, packedOverlay);
        rightHand.render(poseStack, buffer, packedLight, packedOverlay);
        rightOuterFingers.render(poseStack, buffer, packedLight, packedOverlay);
        rightInnerFingers.render(poseStack, buffer, packedLight, packedOverlay);
        rightThumb.render(poseStack, buffer, packedLight, packedOverlay);
        leftShoulder.render(poseStack, buffer, packedLight, packedOverlay);
        leftCore1.render(poseStack, buffer, packedLight, packedOverlay);
        leftCore2.render(poseStack, buffer, packedLight, packedOverlay);
        leftCore3.render(poseStack, buffer, packedLight, packedOverlay);
        leftArm.render(poseStack, buffer, packedLight, packedOverlay);
        leftHand.render(poseStack, buffer, packedLight, packedOverlay);
        leftOuterFingers.render(poseStack, buffer, packedLight, packedOverlay);
        leftInnerFingers.render(poseStack, buffer, packedLight, packedOverlay);
        leftThumb.render(poseStack, buffer, packedLight, packedOverlay);
    }
}

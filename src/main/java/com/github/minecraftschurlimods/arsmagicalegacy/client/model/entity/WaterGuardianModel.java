package com.github.minecraftschurlimods.arsmagicalegacy.client.model.entity;

import com.github.minecraftschurlimods.arsmagicalegacy.api.ArsMagicaAPI;
import com.github.minecraftschurlimods.arsmagicalegacy.common.entity.WaterGuardian;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.geom.ModelLayerLocation;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.builders.LayerDefinition;
import net.minecraft.client.model.geom.builders.MeshDefinition;
import net.minecraft.client.model.geom.builders.PartDefinition;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.Mth;

public class WaterGuardianModel extends EntityModel<WaterGuardian> {
    public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(ArsMagicaAPI.MOD_ID, "water_guardian"), "main");
    private final ModelPart topHead;
    private final ModelPart middleHead;
    private final ModelPart bottomHead;
    private final ModelPart core;
    private final ModelPart northernOuterBody;
    private final ModelPart easternOuterBody;
    private final ModelPart southernOuterBody;
    private final ModelPart westernOuterBody;
    private final ModelPart topNorthernInnerBody;
    private final ModelPart middleNorthernInnerBody;
    private final ModelPart bottomNorthernInnerBody;
    private final ModelPart topEasternInnerBody;
    private final ModelPart middleEasternInnerBody;
    private final ModelPart bottomEasternInnerBody;
    private final ModelPart topSouthernInnerBody;
    private final ModelPart middleSouthernInnerBody;
    private final ModelPart bottomSouthernInnerBody;
    private final ModelPart topWesternInnerBody;
    private final ModelPart middleWesternInnerBody;
    private final ModelPart bottomWesternInnerBody;
    private final ModelPart innerOrb1;
    private final ModelPart outerOrb1;
    private final ModelPart innerOrb2;
    private final ModelPart outerOrb2;
    private final ModelPart innerOrb3;
    private final ModelPart outerOrb3;
    private final ModelPart innerOrb4;
    private final ModelPart outerOrb4;
    private final ModelPart rod1;
    private final ModelPart rod2;
    private final ModelPart rod3;
    private final ModelPart rod4;
    private final ModelPart northernTentacle;
    private final ModelPart easternTentacle;
    private final ModelPart southernTentacle;
    private final ModelPart westernTentacle;
    private final ModelPart outerTentacle1;
    private final ModelPart outerTentacle2;
    private final ModelPart outerTentacle3;
    private final ModelPart outerTentacle4;

    public WaterGuardianModel(ModelPart root) {
        topHead = root.getChild("top_head");
        middleHead = root.getChild("middle_head");
        bottomHead = root.getChild("bottom_head");
        core = root.getChild("core");
        northernOuterBody = root.getChild("northern_outer_body");
        easternOuterBody = root.getChild("eastern_outer_body");
        southernOuterBody = root.getChild("southern_outer_body");
        westernOuterBody = root.getChild("western_outer_body");
        topNorthernInnerBody = root.getChild("top_northern_inner_body");
        middleNorthernInnerBody = root.getChild("middle_northern_inner_body");
        bottomNorthernInnerBody = root.getChild("bottom_northern_inner_body");
        topEasternInnerBody = root.getChild("top_eastern_inner_body");
        middleEasternInnerBody = root.getChild("middle_eastern_inner_body");
        bottomEasternInnerBody = root.getChild("bottom_eastern_inner_body");
        topSouthernInnerBody = root.getChild("top_southern_inner_body");
        middleSouthernInnerBody = root.getChild("middle_southern_inner_body");
        bottomSouthernInnerBody = root.getChild("bottom_southern_inner_body");
        topWesternInnerBody = root.getChild("top_western_inner_body");
        middleWesternInnerBody = root.getChild("top_western_inner_body");
        bottomWesternInnerBody = root.getChild("top_western_inner_body");
        innerOrb1 = root.getChild("inner_orb1");
        outerOrb1 = root.getChild("outer_orb1");
        innerOrb2 = root.getChild("inner_orb2");
        outerOrb2 = root.getChild("outer_orb2");
        innerOrb3 = root.getChild("inner_orb3");
        outerOrb3 = root.getChild("outer_orb3");
        innerOrb4 = root.getChild("inner_orb4");
        outerOrb4 = root.getChild("outer_orb4");
        rod1 = root.getChild("rod1");
        rod2 = root.getChild("rod2");
        rod3 = root.getChild("rod3");
        rod4 = root.getChild("rod4");
        northernTentacle = root.getChild("northern_tentacle");
        easternTentacle = root.getChild("eastern_tentacle");
        southernTentacle = root.getChild("southern_tentacle");
        westernTentacle = root.getChild("western_tentacle");
        outerTentacle1 = root.getChild("outer_tentacle1");
        outerTentacle2 = root.getChild("outer_tentacle2");
        outerTentacle3 = root.getChild("outer_tentacle3");
        outerTentacle4 = root.getChild("outer_tentacle4");
    }

    public static LayerDefinition createBodyLayer() {
        MeshDefinition md = new MeshDefinition();
        PartDefinition pd = md.getRoot();
        ModelUtil.addCube(pd, "top_head", 19, 32, -4, -0.5f, -4, 8, 1, 8, 0, -0.5f, 0);
        ModelUtil.addCube(pd, "middle_head", 23, 42, -5, -0.5f, -5, 10, 1, 10, 0, 0.5f, 0);
        ModelUtil.addCube(pd, "bottom_head", 19, 32, -4, -0.5f, -4, 8, 1, 8, 0, 2.5f, 0);
        ModelUtil.addCube(pd, "core", 10, 56, -2, -2, -2, 4, 4, 4, 0, 5, 0);
        ModelUtil.addCube(pd, "northern_outer_body", 0, 42, -5, -2.5f, 4, 10, 5, 1, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "eastern_outer_body", 0, 28, 4, -2.5f, -4, 1, 5, 8, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "southern_outer_body", 0, 42, -5, -2.5f, -5, 10, 5, 1, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "western_outer_body", 0, 28, -5, -2.5f, -4, 1, 5, 8, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "top_northern_inner_body", 27, 62, -4, -0.5f, 3, 8, 1, 1, 0, 5.5f, 0);
        ModelUtil.addCube(pd, "middle_northern_inner_body", 27, 62, -4, -0.5f, 3, 8, 1, 1, 0, 4.5f, 0);
        ModelUtil.addCube(pd, "bottom_northern_inner_body", 27, 62, -4, -0.5f, 3, 8, 1, 1, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "top_eastern_inner_body", 27, 54, 3, -0.5f, -3, 1, 1, 6, 0, 5.5f, 0);
        ModelUtil.addCube(pd, "middle_eastern_inner_body", 27, 54, 3, -0.5f, -3, 1, 1, 6, 0, 4.5f, 0);
        ModelUtil.addCube(pd, "bottom_eastern_inner_body", 27, 54, 3, -0.5f, -3, 1, 1, 6, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "top_southern_inner_body", 27, 62, -4, -0.5f, -4, 8, 1, 1, 0, 5.5f, 0);
        ModelUtil.addCube(pd, "middle_southern_inner_body", 27, 62, -4, -0.5f, -4, 8, 1, 1, 0, 4.5f, 0);
        ModelUtil.addCube(pd, "bottom_southern_inner_body", 27, 62, -4, -0.5f, -4, 8, 1, 1, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "top_western_inner_body", 27, 54, -4, -0.5f, -3, 1, 1, 6, 0, 5.5f, 0);
        ModelUtil.addCube(pd, "middle_western_inner_body", 27, 54, -4, -0.5f, -3, 1, 1, 6, 0, 4.5f, 0);
        ModelUtil.addCube(pd, "bottom_western_inner_body", 27, 54, -4, -0.5f, -3, 1, 1, 6, 0, 3.5f, 0);
        ModelUtil.addCube(pd, "inner_orb1", 0, 19, -11, 8.5f, -0.5f, 2, 1, 1, 0, -6.5f, 0, 0, -(float) (Math.PI / 2), 0);
        ModelUtil.addCube(pd, "outer_orb1", 0, 15, -1, -10.5f, -10, 2, 1, 2, 0, -6.5f, 0, (float) (Math.PI / 2), 0, 0);
        ModelUtil.addCube(pd, "inner_orb2", 0, 19, -11, 8.5f, -0.5f, 2, 1, 1, 0, -6.5f, 0, 0, -(float) Math.PI, 0);
        ModelUtil.addCube(pd, "outer_orb2", 0, 15, -1, -10.5f, -10, 2, 1, 2, 0, -6.5f, 0, (float) (Math.PI / 2), -(float) (Math.PI / 2), 0);
        ModelUtil.addCube(pd, "inner_orb3", 0, 19, -11, 8.5f, -0.5f, 2, 1, 1, 0, -6.5f, 0, 0, (float) (Math.PI / 2), 0);
        ModelUtil.addCube(pd, "outer_orb3", 0, 15, -1, -10.5f, -10, 2, 1, 2, 0, -6.5f, 0, (float) (Math.PI / 2), -(float) Math.PI, 0);
        ModelUtil.addCube(pd, "inner_orb4", 0, 19, -11, 8.5f, -0.5f, 2, 1, 1, 0, -6.5f, 0, 0, 0, 0);
        ModelUtil.addCube(pd, "outer_orb4", 0, 15, -1, -10.5f, -10, 2, 1, 2, 0, -6.5f, 0, (float) (Math.PI / 2), (float) (Math.PI / 2), 0);
        ModelUtil.addCube(pd, "rod1", 0, 0, 9.5f, -0.5f, 4, 1, 1, 10, 0, 12, 0, (float) (Math.PI / 2), (float) (3 * Math.PI / 4), 0);
        ModelUtil.addCube(pd, "rod2", 0, 0, 9.5f, -0.5f, 4, 1, 1, 10, 0, 12, 0, (float) (Math.PI / 2), -(float) (3 * Math.PI / 4), 0);
        ModelUtil.addCube(pd, "rod3", 0, 0, 9.5f, -0.5f, 4, 1, 1, 10, 0, 12, 0, (float) (Math.PI / 2), -(float) (Math.PI / 4), 0);
        ModelUtil.addCube(pd, "rod4", 0, 0, 9.5f, -0.5f, 4, 1, 1, 10, 0, 12, 0, (float) (Math.PI / 2), (float) (Math.PI / 4), 0);
        ModelUtil.addCube(pd, "northern_tentacle", 5, 53, -0.5f, 0, -4, 1, 10, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "eastern_tentacle", 5, 53, -4, 0, -0.5f, 1, 10, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "southern_tentacle", 5, 53, -0.5f, 0, 3, 1, 10, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "western_tentacle", 5, 53, 3, 0, -0.5f, 1, 10, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "outer_tentacle1", 0, 49, -4, 0, -4, 1, 14, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "outer_tentacle2", 0, 49, -4, 0, 3, 1, 14, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "outer_tentacle3", 0, 49, 3, 0, 3, 1, 14, 1, 0, 6, 0);
        ModelUtil.addCube(pd, "outer_tentacle4", 0, 49, 3, 0, -4, 1, 14, 1, 0, 6, 0);
        return LayerDefinition.create(md, 64, 64);
    }

    @Override
    public void setupAnim(WaterGuardian entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        float y = 45 * (Mth.cos(ageInTicks % 360 * (float) Math.PI / 45f) - Mth.cos((ageInTicks - 1) % 360 * (float) Math.PI / 45f));
        topHead.y = -0.5f + y;
        middleHead.y = 0.5f + y;
        bottomHead.y = 2.5f + y;
        core.y = 5 + y;
        northernOuterBody.y = 3.5f + y;
        easternOuterBody.y = 3.5f + y;
        southernOuterBody.y = 3.5f + y;
        westernOuterBody.y = 3.5f + y;
        topNorthernInnerBody.y = 5.5f + y;
        middleNorthernInnerBody.y = 4.5f + y;
        bottomNorthernInnerBody.y = 3.5f + y;
        topEasternInnerBody.y = 5.5f + y;
        middleEasternInnerBody.y = 4.5f + y;
        bottomEasternInnerBody.y = 3.5f + y;
        topSouthernInnerBody.y = 5.5f + y;
        middleSouthernInnerBody.y = 4.5f + y;
        bottomSouthernInnerBody.y = 3.5f + y;
        topWesternInnerBody.y = 5.5f + y;
        middleWesternInnerBody.y = 4.5f + y;
        bottomWesternInnerBody.y = 3.5f + y;
        innerOrb1.y = -6.5f + y;
        outerOrb1.y = -6.5f + y;
        innerOrb2.y = -6.5f + y;
        outerOrb2.y = -6.5f + y;
        innerOrb3.y = -6.5f + y;
        outerOrb3.y = -6.5f + y;
        innerOrb4.y = -6.5f + y;
        outerOrb4.y = -6.5f + y;
        rod1.y = 12 + y;
        rod2.y = 12 + y;
        rod3.y = 12 + y;
        rod4.y = 12 + y;
        northernTentacle.y = 6 + y;
        easternTentacle.y = 6 + y;
        southernTentacle.y = 6 + y;
        westernTentacle.y = 6 + y;
        outerTentacle1.y = 6 + y;
        outerTentacle2.y = 6 + y;
        outerTentacle3.y = 6 + y;
        outerTentacle4.y = 6 + y;
        float rot = (float) (((ageInTicks + entity.getSpinRotation()) % 360) * Math.PI / 180);
        innerOrb1.yRot = -(float) (Math.PI / 2) + rot;
        outerOrb1.yRot = rot;
        innerOrb2.yRot = -(float) Math.PI + rot;
        outerOrb2.yRot = -(float) (Math.PI / 2) + rot;
        innerOrb3.yRot = (float) (Math.PI / 2) + rot;
        outerOrb3.yRot = -(float) Math.PI + rot;
        innerOrb4.yRot = rot;
        outerOrb4.yRot = (float) (Math.PI / 2) + rot;
        rod1.yRot = (float) (3 * Math.PI / 4) + rot;
        rod2.yRot = -(float) (3 * Math.PI / 4) + rot;
        rod3.yRot = -(float) (Math.PI / 4) + rot;
        rod4.yRot = (float) (Math.PI / 4) + rot;
        float swing = Mth.sin(ageInTicks % 360 * (float) Math.PI / 45f) * 0.1f;
        northernTentacle.xRot = -swing;
        easternTentacle.zRot = swing;
        southernTentacle.xRot = swing;
        westernTentacle.zRot = -swing;
        outerTentacle1.xRot = swing / 2f;
        outerTentacle1.zRot = swing / 2f;
        outerTentacle3.xRot = -swing / 2f;
        outerTentacle3.zRot = -swing / 2f;
        outerTentacle2.xRot = swing / 2f;
        outerTentacle2.zRot = -swing / 2f;
        outerTentacle4.xRot = -swing / 2f;
        outerTentacle4.zRot = swing / 2f;
    }

    @Override
    public void renderToBuffer(PoseStack poseStack, VertexConsumer buffer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
        topHead.render(poseStack, buffer, packedLight, packedOverlay);
        middleHead.render(poseStack, buffer, packedLight, packedOverlay);
        bottomHead.render(poseStack, buffer, packedLight, packedOverlay);
        core.render(poseStack, buffer, packedLight, packedOverlay);
        northernOuterBody.render(poseStack, buffer, packedLight, packedOverlay);
        easternOuterBody.render(poseStack, buffer, packedLight, packedOverlay);
        southernOuterBody.render(poseStack, buffer, packedLight, packedOverlay);
        westernOuterBody.render(poseStack, buffer, packedLight, packedOverlay);
        topNorthernInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        middleNorthernInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        bottomNorthernInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        topEasternInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        middleEasternInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        bottomEasternInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        topSouthernInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        middleSouthernInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        bottomSouthernInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        topWesternInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        middleWesternInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        bottomWesternInnerBody.render(poseStack, buffer, packedLight, packedOverlay);
        innerOrb1.render(poseStack, buffer, packedLight, packedOverlay);
        outerOrb1.render(poseStack, buffer, packedLight, packedOverlay);
        innerOrb2.render(poseStack, buffer, packedLight, packedOverlay);
        outerOrb2.render(poseStack, buffer, packedLight, packedOverlay);
        innerOrb3.render(poseStack, buffer, packedLight, packedOverlay);
        outerOrb3.render(poseStack, buffer, packedLight, packedOverlay);
        innerOrb4.render(poseStack, buffer, packedLight, packedOverlay);
        outerOrb4.render(poseStack, buffer, packedLight, packedOverlay);
        rod1.render(poseStack, buffer, packedLight, packedOverlay);
        rod2.render(poseStack, buffer, packedLight, packedOverlay);
        rod3.render(poseStack, buffer, packedLight, packedOverlay);
        rod4.render(poseStack, buffer, packedLight, packedOverlay);
        northernTentacle.render(poseStack, buffer, packedLight, packedOverlay);
        easternTentacle.render(poseStack, buffer, packedLight, packedOverlay);
        southernTentacle.render(poseStack, buffer, packedLight, packedOverlay);
        westernTentacle.render(poseStack, buffer, packedLight, packedOverlay);
        outerTentacle1.render(poseStack, buffer, packedLight, packedOverlay);
        outerTentacle2.render(poseStack, buffer, packedLight, packedOverlay);
        outerTentacle3.render(poseStack, buffer, packedLight, packedOverlay);
        outerTentacle4.render(poseStack, buffer, packedLight, packedOverlay);
    }
}

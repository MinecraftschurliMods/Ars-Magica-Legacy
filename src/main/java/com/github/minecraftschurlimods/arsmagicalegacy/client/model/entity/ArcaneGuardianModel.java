package com.github.minecraftschurlimods.arsmagicalegacy.client.model.entity;

import com.github.minecraftschurlimods.arsmagicalegacy.api.ArsMagicaAPI;
import com.github.minecraftschurlimods.arsmagicalegacy.common.entity.ArcaneGuardian;
import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.geom.ModelLayerLocation;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.builders.LayerDefinition;
import net.minecraft.client.model.geom.builders.MeshDefinition;
import net.minecraft.client.model.geom.builders.PartDefinition;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.Mth;

public class ArcaneGuardianModel extends EntityModel<ArcaneGuardian> {
    public static final ModelLayerLocation LAYER_LOCATION = new ModelLayerLocation(new ResourceLocation(ArsMagicaAPI.MOD_ID, "arcane_guardian"), "main");
    private final ModelPart head;
    private final ModelPart neck;
    private final ModelPart hoodTop;
    private final ModelPart hoodLeft;
    private final ModelPart hoodRight;
    private final ModelPart hoodBack;
    private final ModelPart body;
    private final ModelPart rune;
    private final ModelPart rod;
    private final ModelPart rod1;
    private final ModelPart rod2;
    private final ModelPart rod3;
    private final ModelPart rod4;
    private final ModelPart upperRightArm;
    private final ModelPart lowerRightArm;
    private final ModelPart rightHand;
    private final ModelPart wand;
    private final ModelPart upperLeftArm;
    private final ModelPart lowerLeftArm;
    private final ModelPart leftHand;
    private final ModelPart book;
    private final ModelPart robeTop;
    private final ModelPart robeFront;
    private final ModelPart rightLeg;
    private final ModelPart robeBackRight;
    private final ModelPart robeRight;
    private final ModelPart leftLeg;
    private final ModelPart robeBackLeft;
    private final ModelPart robeLeft;

    public ArcaneGuardianModel(ModelPart root) {
        head = root.getChild("head");
        neck = root.getChild("neck");
        hoodTop = root.getChild("hood_top");
        hoodLeft = root.getChild("hood_left");
        hoodRight = root.getChild("hood_right");
        hoodBack = root.getChild("hood_back");
        body = root.getChild("body");
        rune = root.getChild("rune");
        rod = root.getChild("rod");
        rod1 = root.getChild("rod1");
        rod2 = root.getChild("rod2");
        rod3 = root.getChild("rod3");
        rod4 = root.getChild("rod4");
        upperRightArm = root.getChild("upper_right_arm");
        lowerRightArm = root.getChild("lower_right_arm");
        rightHand = root.getChild("right_hand");
        wand = root.getChild("wand");
        upperLeftArm = root.getChild("upper_left_arm");
        lowerLeftArm = root.getChild("lower_left_arm");
        leftHand = root.getChild("left_hand");
        book = root.getChild("book");
        robeTop = root.getChild("robe_top");
        robeFront = root.getChild("robe_front");
        rightLeg = root.getChild("right_leg");
        robeBackRight = root.getChild("robe_back_right");
        robeRight = root.getChild("robe_right");
        leftLeg = root.getChild("left_leg");
        robeBackLeft = root.getChild("robe_back_left");
        robeLeft = root.getChild("robe_left");
    }

    public static LayerDefinition createBodyLayer() {
        MeshDefinition meshdefinition = new MeshDefinition();
        PartDefinition partdefinition = meshdefinition.getRoot();
        ModelUtil.addCube(partdefinition, "head", 100, 44, -3f, -7f, -3f, 7f, 7f, 7f, 0f, -4.5f, 0f);
        ModelUtil.addCube(partdefinition, "neck", 95, 116, -0.5f, -0.5f, -0.5f, 2f, 1f, 2f, 0f, -4f, 0f);
        ModelUtil.addCube(partdefinition, "hood_top", 94, 34, -4f, -8f, -3f, 9f, 1f, 8f, 0f, -4.5f, 0f);
        ModelUtil.addCube(partdefinition, "hood_left", 91, 17, -4f, -7f, -3f, 1f, 8f, 8f, 0f, -4.5f, 0f);
        ModelUtil.addCube(partdefinition, "hood_right", 110, 17, 4f, -7f, -3f, 1f, 8f, 8f, 0f, -4.5f, 0f);
        ModelUtil.addCube(partdefinition, "hood_back", 112, 7, -3f, -7f, 4f, 7f, 8f, 1f, 0f, -4.5f, 0f);
        ModelUtil.addCube(partdefinition, "body", 104, 59, -3.5f, -2f, -1.5f, 8f, 4f, 4f, 0f, -1.5f, 0f);
        ModelUtil.addCube(partdefinition, "rune", 0, 0, -21.5f, -22f, 10.5f, 44f, 44f, 0f, 0f, 2f, 0f);
        ModelUtil.addCube(partdefinition, "rod", 103, 8, -0.5f, -3f, -0.5f, 2f, 6f, 2f, 0f, 2.5f, 0f);
        ModelUtil.addCube(partdefinition, "rod1", 118, 1, -2f, -1.5f, -0.5f, 4f, 4f, 1f, 0.5f, 2.5f, 0.5f, 0f, 0f, -0.7854f);
        ModelUtil.addCube(partdefinition, "rod2", 118, 1, -2f, -1.5f, -0.5f, 4f, 4f, 1f, 0.5f, 2.5f, 0.5f, 0.6109f, 0.5236f, 0.9599f);
        ModelUtil.addCube(partdefinition, "rod3", 118, 1, -2f, -1.5f, -0.5f, 4f, 4f, 1f, 0.5f, 2.5f, 0.5f, 1.5708f, -0.7854f, -1.5708f);
        ModelUtil.addCube(partdefinition, "rod4", 118, 1, -2f, -1.5f, -0.5f, 4f, 4f, 1f, 0.5f, 2.5f, 0.5f, 0.6109f, -0.5236f, -0.9599f);
        ModelUtil.addCube(partdefinition, "upper_right_arm", 103, 68, -7.5f, -2.5f, -1.5f, 4f, 5f, 4f, 0f, -1f, 0f);
        ModelUtil.addCube(partdefinition, "lower_right_arm", 69, 68, -7.5f, 2.5f, -1.5f, 4f, 5f, 4f, 0f, -1f, 0f);
        ModelUtil.addCube(partdefinition, "right_hand", 106, 78, -3f, -1f, -8.5f, 2f, 2f, 1f, -3.5f, -1f, 0.5f, 1.5708f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "wand", 98, 97, -2.5f, -0.5f, -14.5f, 1f, 1f, 6f, -3.5f, -1.5f, 0.5f, 1.5708f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "upper_left_arm", 103, 68, 0f, -2.5f, -2f, 4f, 5f, 4f, 4.5f, -1f, 0.5f, -0.7854f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "lower_left_arm", 86, 68, -2.5f, -2.0f, -2.0f, 4f, 5f, 4f, 6.5f, 2.5355f, -3.0355f, 0f, 0.7854f, 1.5708f);
        ModelUtil.addCube(partdefinition, "left_hand", 113, 78, -2f, 3f, -2.5f, 1f, 2f, 2f, 4.5f, 0.5f, 2f, -0.7854f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "book", 91, 120, -1.5f, -3f, -3.5f, 4f, 6f, 2f, 0f, 1.5f, 0f);
        ModelUtil.addCube(partdefinition, "robe_top", 104, 83, -3.5f, -2f, -1.5f, 8f, 4f, 4f, 0f, 6.5f, 0f);
        ModelUtil.addCube(partdefinition, "robe_front", 110, 105, -3.5f, -4.5f, -1.5f, 8f, 9f, 1f, 0f, 13f, 0f);
        ModelUtil.addCube(partdefinition, "right_leg", 120, 68, -1f, 0f, -1.1f, 2f, 12f, 2f, -1.5f, 8.5f, 1.5f, 0.1745f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "robe_back_right", 88, 105, -2f, 0.4f, -0.6f, 4f, 9f, 1f, -1.5f, 8f, 2f, 0.1745f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "robe_right", 113, 92, -7.501f, -0.6f, -1.35f, 1f, 9f, 3f, 4f, 9f, 0.5f, 0.0873f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "left_leg", 120, 68, -1f, 0f, -1.1f, 2f, 12f, 2f, 2.5f, 8.5f, 0.5f, 0.1745f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "robe_back_left", 99, 105, 2f, 0.4f, -0.6f, 4f, 9f, 1f, -1.5f, 8f, 2f, 0.1745f, 0f, 0f);
        ModelUtil.addCube(partdefinition, "robe_left", 122, 93, -0.499f, -0.6f, -0.85f, 1f, 9f, 2f, 4f, 9f, 0.5f, 0.0873f, 0f, 0f);
        return LayerDefinition.create(meshdefinition, 128, 128);
    }

    @Override
    public void setupAnim(ArcaneGuardian entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        head.xRot = headPitch * (float) Math.PI / 180f;
        head.yRot = netHeadYaw * (float) Math.PI / 180f;
        hoodTop.xRot = headPitch * (float) Math.PI / 180f;
        hoodTop.yRot = netHeadYaw * (float) Math.PI / 180f;
        hoodLeft.xRot = headPitch * (float) Math.PI / 180f;
        hoodLeft.yRot = netHeadYaw * (float) Math.PI / 180f;
        hoodRight.xRot = headPitch * (float) Math.PI / 180f;
        hoodRight.yRot = netHeadYaw * (float) Math.PI / 180f;
        hoodBack.xRot = headPitch * (float) Math.PI / 180f;
        hoodBack.yRot = netHeadYaw * (float) Math.PI / 180f;
        float y = 45 * (Mth.cos(ageInTicks % 360 * (float) Math.PI / 45f) - Mth.cos((ageInTicks - 1) % 360 * (float) Math.PI / 45f));
        head.y = -4.5f + y;
        neck.y = -4f + y;
        hoodTop.y = -4.5f + y;
        hoodLeft.y = -4.5f + y;
        hoodRight.y = -4.5f + y;
        hoodBack.y = -4.5f + y;
        body.y = -1.5f + y;
        rod.y = 2.5f + y;
        rod1.y = 2.5f + y;
        rod2.y = 2.5f + y;
        rod3.y = 2.5f + y;
        rod4.y = 2.5f + y;
        upperRightArm.y = -1 + y;
        lowerRightArm.y = -1 + y;
        rightHand.y = -1 + y;
        wand.y = -1.5f + y;
        upperLeftArm.y = -1 + y;
        lowerLeftArm.y = 2.5355f + y;
        leftHand.y = 0.5f + y;
        book.y = 1.5f + y;
        robeTop.y = 6.5f + y;
        robeFront.y = 13 + y;
        rightLeg.y = 8.5f + y;
        robeBackRight.y = 8 + y;
        robeRight.y = 9 + y;
        leftLeg.y = 8.5f + y;
        robeBackLeft.y = 8 + y;
        robeLeft.y = 9 + y;
        rune.zRot = (float) ((ageInTicks % 360) * Math.PI / 180);
        float swing = Mth.cos((ageInTicks % 360) * 0.1f) * 0.05f + 0.05f;
        upperRightArm.zRot = swing;
        lowerRightArm.zRot = swing;
        rightHand.zRot = swing;
        wand.zRot = swing;
    }

    @Override
    public void renderToBuffer(PoseStack poseStack, VertexConsumer buffer, int packedLight, int packedOverlay, float red, float green, float blue, float alpha) {
        head.render(poseStack, buffer, packedLight, packedOverlay);
        neck.render(poseStack, buffer, packedLight, packedOverlay);
        hoodTop.render(poseStack, buffer, packedLight, packedOverlay);
        hoodLeft.render(poseStack, buffer, packedLight, packedOverlay);
        hoodRight.render(poseStack, buffer, packedLight, packedOverlay);
        hoodBack.render(poseStack, buffer, packedLight, packedOverlay);
        body.render(poseStack, buffer, packedLight, packedOverlay);
        rune.render(poseStack, buffer, packedLight, packedOverlay);
        rod.render(poseStack, buffer, packedLight, packedOverlay);
        rod1.render(poseStack, buffer, packedLight, packedOverlay);
        rod2.render(poseStack, buffer, packedLight, packedOverlay);
        rod3.render(poseStack, buffer, packedLight, packedOverlay);
        rod4.render(poseStack, buffer, packedLight, packedOverlay);
        upperRightArm.render(poseStack, buffer, packedLight, packedOverlay);
        lowerRightArm.render(poseStack, buffer, packedLight, packedOverlay);
        rightHand.render(poseStack, buffer, packedLight, packedOverlay);
        wand.render(poseStack, buffer, packedLight, packedOverlay);
        upperLeftArm.render(poseStack, buffer, packedLight, packedOverlay);
        lowerLeftArm.render(poseStack, buffer, packedLight, packedOverlay);
        leftHand.render(poseStack, buffer, packedLight, packedOverlay);
        book.render(poseStack, buffer, packedLight, packedOverlay);
        robeTop.render(poseStack, buffer, packedLight, packedOverlay);
        robeFront.render(poseStack, buffer, packedLight, packedOverlay);
        rightLeg.render(poseStack, buffer, packedLight, packedOverlay);
        robeBackRight.render(poseStack, buffer, packedLight, packedOverlay);
        robeRight.render(poseStack, buffer, packedLight, packedOverlay);
        leftLeg.render(poseStack, buffer, packedLight, packedOverlay);
        robeBackLeft.render(poseStack, buffer, packedLight, packedOverlay);
        robeLeft.render(poseStack, buffer, packedLight, packedOverlay);
    }
}

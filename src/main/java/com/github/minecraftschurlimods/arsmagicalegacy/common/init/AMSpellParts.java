package com.github.minecraftschurlimods.arsmagicalegacy.common.init;

import com.github.minecraftschurlimods.arsmagicalegacy.Config;
import com.github.minecraftschurlimods.arsmagicalegacy.api.magic.ContingencyType;
import com.github.minecraftschurlimods.arsmagicalegacy.api.spell.DefaultSpellPartStatModifier;
import com.github.minecraftschurlimods.arsmagicalegacy.api.spell.ISpellModifier;
import com.github.minecraftschurlimods.arsmagicalegacy.api.spell.ISpellPart;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.SpellPartStats;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Attract;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.BanishRain;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Blink;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Blizzard;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Charm;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.CreateWater;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Damage;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Daylight;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Dig;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Disarm;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Dispel;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.DivineIntervention;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Drought;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Effect;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.EnderIntervention;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Explosion;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.FallingStar;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.FireRain;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Fling;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Forge;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Grow;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Harvest;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Heal;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Ignition;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Knockback;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.LifeDrain;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.LifeTap;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Light;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.ManaBlast;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.ManaDrain;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.MeltArmor;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Moonrise;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.PlaceBlock;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Plant;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Plow;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.RandomTeleport;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Recall;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Repel;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Rift;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Storm;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Summon;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Telekinesis;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.Transplace;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.component.WizardsAutumn;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.modifier.Color;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.modifier.GenericSpellModifier;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.modifier.Lunar;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.modifier.Solar;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.AoE;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Beam;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Chain;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Channel;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Contingency;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Projectile;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Rune;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Self;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Touch;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Wall;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Wave;
import com.github.minecraftschurlimods.arsmagicalegacy.common.spell.shape.Zone;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.Entity;
import net.minecraft.world.entity.player.Player;
import net.neoforged.neoforge.common.NeoForgeMod;
import net.neoforged.neoforge.registries.DeferredHolder;
import org.jetbrains.annotations.ApiStatus.Internal;
import org.jetbrains.annotations.ApiStatus.NonExtendable;

import static com.github.minecraftschurlimods.arsmagicalegacy.common.init.AMRegistries.SPELL_PARTS;

@NonExtendable
public interface AMSpellParts {
    DeferredHolder<ISpellPart, AoE>                AOE                 = SPELL_PARTS.register("aoe",                 AoE::new);
    DeferredHolder<ISpellPart, Beam>               BEAM                = SPELL_PARTS.register("beam",                Beam::new);
    DeferredHolder<ISpellPart, Chain>              CHAIN               = SPELL_PARTS.register("chain",               Chain::new);
    DeferredHolder<ISpellPart, Channel>            CHANNEL             = SPELL_PARTS.register("channel",             Channel::new);
    DeferredHolder<ISpellPart, Projectile>         PROJECTILE          = SPELL_PARTS.register("projectile",          Projectile::new);
    DeferredHolder<ISpellPart, Rune>               RUNE                = SPELL_PARTS.register("rune",                Rune::new);
    DeferredHolder<ISpellPart, Self>               SELF                = SPELL_PARTS.register("self",                Self::new);
    DeferredHolder<ISpellPart, Touch>              TOUCH               = SPELL_PARTS.register("touch",               Touch::new);
    DeferredHolder<ISpellPart, Wall>               WALL                = SPELL_PARTS.register("wall",                Wall::new);
    DeferredHolder<ISpellPart, Wave>               WAVE                = SPELL_PARTS.register("wave",                Wave::new);
    DeferredHolder<ISpellPart, Zone>               ZONE                = SPELL_PARTS.register("zone",                Zone::new);
    DeferredHolder<ISpellPart, Contingency>        CONTINGENCY_DEATH   = SPELL_PARTS.register("contingency_death",   () -> new Contingency(ContingencyType.DEATH));
    DeferredHolder<ISpellPart, Contingency>        CONTINGENCY_DAMAGE  = SPELL_PARTS.register("contingency_damage",  () -> new Contingency(ContingencyType.DAMAGE));
    DeferredHolder<ISpellPart, Contingency>        CONTINGENCY_HEALTH  = SPELL_PARTS.register("contingency_health",  () -> new Contingency(ContingencyType.HEALTH));
    DeferredHolder<ISpellPart, Contingency>        CONTINGENCY_FIRE    = SPELL_PARTS.register("contingency_fire",    () -> new Contingency(ContingencyType.FIRE));
    DeferredHolder<ISpellPart, Contingency>        CONTINGENCY_FALL    = SPELL_PARTS.register("contingency_fall",    () -> new Contingency(ContingencyType.FALL));

    DeferredHolder<ISpellPart, Damage>             DROWNING_DAMAGE     = SPELL_PARTS.register("drowning_damage",     () -> new Damage(e -> e.damageSources().drown(), Config.SERVER.DAMAGE, e -> !e.canDrownInFluidType(NeoForgeMod.WATER_TYPE.value())));
    DeferredHolder<ISpellPart, Damage>             FIRE_DAMAGE         = SPELL_PARTS.register("fire_damage",         () -> new Damage(e -> e.damageSources().inFire(), Config.SERVER.DAMAGE, Entity::fireImmune));
    DeferredHolder<ISpellPart, Damage>             FROST_DAMAGE        = SPELL_PARTS.register("frost_damage",        () -> new Damage(e -> e.damageSources().freeze(), Config.SERVER.DAMAGE, e -> !e.canFreeze()));
    DeferredHolder<ISpellPart, Damage>             LIGHTNING_DAMAGE    = SPELL_PARTS.register("lightning_damage",    () -> new Damage(e -> e.damageSources().lightningBolt(), Config.SERVER.DAMAGE));
    DeferredHolder<ISpellPart, Damage>             MAGIC_DAMAGE        = SPELL_PARTS.register("magic_damage",        () -> new Damage(e -> e.damageSources().indirectMagic(e, null), Config.SERVER.DAMAGE));
    DeferredHolder<ISpellPart, Damage>             PHYSICAL_DAMAGE     = SPELL_PARTS.register("physical_damage",     () -> new Damage(e -> e instanceof Player p ? p.damageSources().playerAttack(p) : e.damageSources().mobAttack(e), Config.SERVER.DAMAGE));
    DeferredHolder<ISpellPart, Effect>             ABSORPTION          = SPELL_PARTS.register("absorption",          () -> new Effect(MobEffects.ABSORPTION));
    DeferredHolder<ISpellPart, Effect>             BLINDNESS           = SPELL_PARTS.register("blindness",           () -> new Effect(MobEffects.BLINDNESS));
    DeferredHolder<ISpellPart, Effect>             HASTE               = SPELL_PARTS.register("haste",               () -> new Effect(MobEffects.DIG_SPEED));
    DeferredHolder<ISpellPart, Effect>             HEALTH_BOOST        = SPELL_PARTS.register("health_boost",        () -> new Effect(MobEffects.HEALTH_BOOST));
    DeferredHolder<ISpellPart, Effect>             INVISIBILITY        = SPELL_PARTS.register("invisibility",        () -> new Effect(MobEffects.INVISIBILITY));
    DeferredHolder<ISpellPart, Effect>             JUMP_BOOST          = SPELL_PARTS.register("jump_boost",          () -> new Effect(MobEffects.JUMP));
    DeferredHolder<ISpellPart, Effect>             LEVITATION          = SPELL_PARTS.register("levitation",          () -> new Effect(MobEffects.LEVITATION));
    DeferredHolder<ISpellPart, Effect>             NAUSEA              = SPELL_PARTS.register("nausea",              () -> new Effect(MobEffects.CONFUSION));
    DeferredHolder<ISpellPart, Effect>             NIGHT_VISION        = SPELL_PARTS.register("night_vision",        () -> new Effect(MobEffects.NIGHT_VISION));
    DeferredHolder<ISpellPart, Effect>             REGENERATION        = SPELL_PARTS.register("regeneration",        () -> new Effect(MobEffects.REGENERATION));
    DeferredHolder<ISpellPart, Effect>             SLOWNESS            = SPELL_PARTS.register("slowness",            () -> new Effect(MobEffects.MOVEMENT_SLOWDOWN));
    DeferredHolder<ISpellPart, Effect>             SLOW_FALLING        = SPELL_PARTS.register("slow_falling",        () -> new Effect(MobEffects.SLOW_FALLING));
    DeferredHolder<ISpellPart, Effect>             WATER_BREATHING     = SPELL_PARTS.register("water_breathing",     () -> new Effect(MobEffects.WATER_BREATHING));
    DeferredHolder<ISpellPart, Effect>             AGILITY             = SPELL_PARTS.register("agility",             () -> new Effect(AMMobEffects.AGILITY));
    DeferredHolder<ISpellPart, Effect>             ASTRAL_DISTORTION   = SPELL_PARTS.register("astral_distortion",   () -> new Effect(AMMobEffects.ASTRAL_DISTORTION));
    DeferredHolder<ISpellPart, Effect>             ENTANGLE            = SPELL_PARTS.register("entangle",            () -> new Effect(AMMobEffects.ENTANGLE));
    DeferredHolder<ISpellPart, Effect>             FLIGHT              = SPELL_PARTS.register("flight",              () -> new Effect(AMMobEffects.FLIGHT));
    DeferredHolder<ISpellPart, Effect>             FROST               = SPELL_PARTS.register("frost",               () -> new Effect(AMMobEffects.FROST));
    DeferredHolder<ISpellPart, Effect>             FURY                = SPELL_PARTS.register("fury",                () -> new Effect(AMMobEffects.FURY));
    DeferredHolder<ISpellPart, Effect>             GRAVITY_WELL        = SPELL_PARTS.register("gravity_well",        () -> new Effect(AMMobEffects.GRAVITY_WELL));
    DeferredHolder<ISpellPart, Effect>             REFLECT             = SPELL_PARTS.register("reflect",             () -> new Effect(AMMobEffects.REFLECT));
    DeferredHolder<ISpellPart, Effect>             SCRAMBLE_SYNAPSES   = SPELL_PARTS.register("scramble_synapses",   () -> new Effect(AMMobEffects.SCRAMBLE_SYNAPSES));
    DeferredHolder<ISpellPart, Effect>             SHIELD              = SPELL_PARTS.register("shield",              () -> new Effect(AMMobEffects.SHIELD));
    DeferredHolder<ISpellPart, Effect>             SHRINK              = SPELL_PARTS.register("shrink",              () -> new Effect(AMMobEffects.SHRINK));
    DeferredHolder<ISpellPart, Effect>             SILENCE             = SPELL_PARTS.register("silence",             () -> new Effect(AMMobEffects.SILENCE));
    DeferredHolder<ISpellPart, Effect>             SWIFT_SWIM          = SPELL_PARTS.register("swift_swim",          () -> new Effect(AMMobEffects.SWIFT_SWIM));
    DeferredHolder<ISpellPart, Effect>             TEMPORAL_ANCHOR     = SPELL_PARTS.register("temporal_anchor",     () -> new Effect(AMMobEffects.TEMPORAL_ANCHOR));
    DeferredHolder<ISpellPart, Effect>             TRUE_SIGHT          = SPELL_PARTS.register("true_sight",          () -> new Effect(AMMobEffects.TRUE_SIGHT));
    DeferredHolder<ISpellPart, Effect>             WATERY_GRAVE        = SPELL_PARTS.register("watery_grave",        () -> new Effect(AMMobEffects.WATERY_GRAVE));
    DeferredHolder<ISpellPart, Attract>            ATTRACT             = SPELL_PARTS.register("attract",             Attract::new);
    DeferredHolder<ISpellPart, BanishRain>         BANISH_RAIN         = SPELL_PARTS.register("banish_rain",         BanishRain::new);
    DeferredHolder<ISpellPart, Blink>              BLINK               = SPELL_PARTS.register("blink",               Blink::new);
    DeferredHolder<ISpellPart, Blizzard>           BLIZZARD            = SPELL_PARTS.register("blizzard",            Blizzard::new);
    DeferredHolder<ISpellPart, Charm>              CHARM               = SPELL_PARTS.register("charm",               Charm::new);
    DeferredHolder<ISpellPart, CreateWater>        CREATE_WATER        = SPELL_PARTS.register("create_water",        CreateWater::new);
    DeferredHolder<ISpellPart, Daylight>           DAYLIGHT            = SPELL_PARTS.register("daylight",            Daylight::new);
    DeferredHolder<ISpellPart, Dig>                DIG                 = SPELL_PARTS.register("dig",                 Dig::new);
    DeferredHolder<ISpellPart, Disarm>             DISARM              = SPELL_PARTS.register("disarm",              Disarm::new);
    DeferredHolder<ISpellPart, Dispel>             DISPEL              = SPELL_PARTS.register("dispel",              Dispel::new);
    DeferredHolder<ISpellPart, DivineIntervention> DIVINE_INTERVENTION = SPELL_PARTS.register("divine_intervention", DivineIntervention::new);
    DeferredHolder<ISpellPart, Drought>            DROUGHT             = SPELL_PARTS.register("drought",             Drought::new);
    DeferredHolder<ISpellPart, EnderIntervention>  ENDER_INTERVENTION  = SPELL_PARTS.register("ender_intervention",  EnderIntervention::new);
    DeferredHolder<ISpellPart, Explosion>          EXPLOSION           = SPELL_PARTS.register("explosion",           Explosion ::new);
    DeferredHolder<ISpellPart, FallingStar>        FALLING_STAR        = SPELL_PARTS.register("falling_star",        FallingStar::new);
    DeferredHolder<ISpellPart, FireRain>           FIRE_RAIN           = SPELL_PARTS.register("fire_rain",           FireRain::new);
    DeferredHolder<ISpellPart, Fling>              FLING               = SPELL_PARTS.register("fling",               Fling::new);
    DeferredHolder<ISpellPart, Forge>              FORGE               = SPELL_PARTS.register("forge",               Forge::new);
    DeferredHolder<ISpellPart, Grow>               GROW                = SPELL_PARTS.register("grow",                Grow::new);
    DeferredHolder<ISpellPart, Harvest>            HARVEST             = SPELL_PARTS.register("harvest",             Harvest::new);
    DeferredHolder<ISpellPart, Heal>               HEAL                = SPELL_PARTS.register("heal",                Heal::new);
    DeferredHolder<ISpellPart, Ignition>           IGNITION            = SPELL_PARTS.register("ignition",            Ignition::new);
    DeferredHolder<ISpellPart, Knockback>          KNOCKBACK           = SPELL_PARTS.register("knockback",           Knockback::new);
    DeferredHolder<ISpellPart, LifeDrain>          LIFE_DRAIN          = SPELL_PARTS.register("life_drain",          LifeDrain::new);
    DeferredHolder<ISpellPart, LifeTap>            LIFE_TAP            = SPELL_PARTS.register("life_tap",            LifeTap::new);
    DeferredHolder<ISpellPart, Light>              LIGHT               = SPELL_PARTS.register("light",               Light::new);
    DeferredHolder<ISpellPart, ManaBlast>          MANA_BLAST          = SPELL_PARTS.register("mana_blast",          ManaBlast::new);
    DeferredHolder<ISpellPart, ManaDrain>          MANA_DRAIN          = SPELL_PARTS.register("mana_drain",          ManaDrain::new);
    DeferredHolder<ISpellPart, MeltArmor>          MELT_ARMOR          = SPELL_PARTS.register("melt_armor",          MeltArmor::new);
    DeferredHolder<ISpellPart, Moonrise>           MOONRISE            = SPELL_PARTS.register("moonrise",            Moonrise::new);
    DeferredHolder<ISpellPart, PlaceBlock>         PLACE_BLOCK         = SPELL_PARTS.register("place_block",         PlaceBlock::new);
    DeferredHolder<ISpellPart, Plant>              PLANT               = SPELL_PARTS.register("plant",               Plant::new);
    DeferredHolder<ISpellPart, Plow>               PLOW                = SPELL_PARTS.register("plow",                Plow::new);
    DeferredHolder<ISpellPart, RandomTeleport>     RANDOM_TELEPORT     = SPELL_PARTS.register("random_teleport",     RandomTeleport::new);
    DeferredHolder<ISpellPart, Recall>             RECALL              = SPELL_PARTS.register("recall",              Recall::new);
    DeferredHolder<ISpellPart, Repel>              REPEL               = SPELL_PARTS.register("repel",               Repel::new);
    DeferredHolder<ISpellPart, Rift>               RIFT                = SPELL_PARTS.register("rift",                Rift::new);
    DeferredHolder<ISpellPart, Storm>              STORM               = SPELL_PARTS.register("storm",               Storm::new);
    DeferredHolder<ISpellPart, Summon>             SUMMON              = SPELL_PARTS.register("summon",              Summon::new);
    DeferredHolder<ISpellPart, Telekinesis>        TELEKINESIS         = SPELL_PARTS.register("telekinesis",         Telekinesis::new);
    DeferredHolder<ISpellPart, Transplace>         TRANSPLACE          = SPELL_PARTS.register("transplace",          Transplace::new);
    DeferredHolder<ISpellPart, WizardsAutumn>      WIZARDS_AUTUMN      = SPELL_PARTS.register("wizards_autumn",      WizardsAutumn::new);

    DeferredHolder<ISpellPart, ISpellModifier>     BOUNCE              = SPELL_PARTS.register("bounce",              () -> new GenericSpellModifier().addStatModifier(SpellPartStats.BOUNCE, DefaultSpellPartStatModifier.add(2f)));
    DeferredHolder<ISpellPart, ISpellModifier>     DAMAGE              = SPELL_PARTS.register("damage",              () -> new GenericSpellModifier().addStatModifier(SpellPartStats.DAMAGE, DefaultSpellPartStatModifier.add(2f)));
    DeferredHolder<ISpellPart, ISpellModifier>     DISMEMBERING        = SPELL_PARTS.register("dismembering",        GenericSpellModifier::new);
    DeferredHolder<ISpellPart, ISpellModifier>     DURATION            = SPELL_PARTS.register("duration",            () -> new GenericSpellModifier().addStatModifier(SpellPartStats.DURATION, DefaultSpellPartStatModifier.multiply(2f)));
    DeferredHolder<ISpellPart, ISpellModifier>     EFFECT_POWER        = SPELL_PARTS.register("effect_power",        () -> new GenericSpellModifier().addStatModifier(SpellPartStats.POWER, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     GRAVITY             = SPELL_PARTS.register("gravity",             () -> new GenericSpellModifier().addStatModifier(SpellPartStats.GRAVITY, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     HEALING             = SPELL_PARTS.register("healing",             () -> new GenericSpellModifier().addStatModifier(SpellPartStats.HEALING, DefaultSpellPartStatModifier.multiply(2f)));
    DeferredHolder<ISpellPart, ISpellModifier>     LUNAR               = SPELL_PARTS.register("lunar",               Lunar::new);
    DeferredHolder<ISpellPart, ISpellModifier>     MINING_POWER        = SPELL_PARTS.register("mining_power",        () -> new GenericSpellModifier().addStatModifier(SpellPartStats.MINING_TIER, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     PIERCING            = SPELL_PARTS.register("piercing",            () -> new GenericSpellModifier().addStatModifier(SpellPartStats.PIERCING, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     PROSPERITY          = SPELL_PARTS.register("prosperity",          () -> new GenericSpellModifier().addStatModifier(SpellPartStats.FORTUNE, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     RANGE               = SPELL_PARTS.register("range",               () -> new GenericSpellModifier().addStatModifier(SpellPartStats.RANGE, DefaultSpellPartStatModifier.multiply(4f)));
    DeferredHolder<ISpellPart, ISpellModifier>     RUNE_PROCS          = SPELL_PARTS.register("rune_procs",          GenericSpellModifier::new);
    DeferredHolder<ISpellPart, ISpellModifier>     SILK_TOUCH          = SPELL_PARTS.register("silk_touch",          () -> new GenericSpellModifier().addStatModifier(SpellPartStats.SILK_TOUCH, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     SOLAR               = SPELL_PARTS.register("solar",               Solar::new);
    DeferredHolder<ISpellPart, ISpellModifier>     TARGET_NON_SOLID    = SPELL_PARTS.register("target_non_solid",    () -> new GenericSpellModifier().addStatModifier(SpellPartStats.TARGET_NON_SOLID, DefaultSpellPartStatModifier.COUNTING));
    DeferredHolder<ISpellPart, ISpellModifier>     VELOCITY            = SPELL_PARTS.register("velocity",            () -> new GenericSpellModifier().addStatModifier(SpellPartStats.SPEED, DefaultSpellPartStatModifier.addMultipliedBase(0.5f)));
    DeferredHolder<ISpellPart, ISpellModifier>     COLOR               = SPELL_PARTS.register("color",               Color::new);

    /**
     * Empty method that is required for classloading
     */
    @Internal
    static void register() {}
}

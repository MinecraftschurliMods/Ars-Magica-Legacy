Index: src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/Ritual.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/Ritual.java b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/Ritual.java
new file mode 100644
--- /dev/null	(date 1651247112732)
+++ b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/Ritual.java	(date 1651247112732)
@@ -0,0 +1,71 @@
+package com.github.minecraftschurlimods.arsmagicalegacy.common.ritual;
+
+import com.github.minecraftschurlimods.arsmagicalegacy.compat.patchouli.PatchouliCompat;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.Level;
+
+import java.util.function.BiPredicate;
+import java.util.function.Function;
+
+/**
+ *
+ */
+public record Ritual(RitualStructure structure, RitualTrigger trigger, RitualEffect effect) {
+    public static final Codec<Ritual> CODEC = RecordCodecBuilder.create(inst -> inst.group(
+            RitualStructure.CODEC.fieldOf("structure").forGetter(Ritual::structure),
+            RitualTrigger.CODEC.fieldOf("trigger").forGetter(Ritual::trigger),
+            RitualEffect.CODEC.fieldOf("effect").forGetter(Ritual::effect)
+    ).apply(inst, Ritual::new));
+
+    public Ritual {
+        trigger.register(this);
+    }
+
+    static Registry<Codec<? extends RitualTrigger>> ritualTriggerCodecs;
+    static Registry<Codec<? extends RitualEffect>> ritualEffectCodecs;
+
+    public boolean perform(ServerLevel level, BlockPos pos) {
+        if (this.structure.test(level, pos) && this.trigger.trigger(level, pos)) {
+            this.effect.performEffect(level, pos);
+            return true;
+        }
+        return false;
+    }
+
+    private record RitualStructure(ResourceLocation type, BiPredicate<Level, BlockPos> tester) implements BiPredicate<Level, BlockPos> {
+        private static final Codec<RitualStructure> CODEC = ResourceLocation.CODEC.xmap(location -> new RitualStructure(location, PatchouliCompat.getMultiblockMatcher(location)), RitualStructure::type);
+
+        @Override
+        public boolean test(final Level level, final BlockPos pos) {
+            return tester.test(level, pos);
+        }
+    }
+
+    public interface RitualTrigger {
+        Codec<RitualTrigger> CODEC = ritualTriggerCodecs.byNameCodec().dispatchStable(RitualTrigger::codec, Function.identity());
+
+        void register(Ritual ritual);
+
+        boolean trigger(ServerLevel level, BlockPos pos);
+
+        Codec<? extends RitualTrigger> codec();
+    }
+
+    public interface RitualEffect {
+        Codec<RitualEffect> CODEC = ritualEffectCodecs.byNameCodec().dispatchStable(RitualEffect::codec, Function.identity());
+
+        void performEffect(ServerLevel level, BlockPos pos);
+
+        Codec<? extends RitualEffect> codec();
+    }
+
+    static {
+        Registry.register(ritualEffectCodecs, "arsmagicalegacy:entity_spawn_ritual_effect", EntitySpawnRitualEffect.CODEC);
+        Registry.register(ritualTriggerCodecs, "arsmagicalegacy:item_drop_ritual_trigger", ItemDropRitualTrigger.CODEC);
+    }
+}
Index: src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/package-info.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/package-info.java b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/package-info.java
new file mode 100644
--- /dev/null	(date 1651243820664)
+++ b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/package-info.java	(date 1651243820664)
@@ -0,0 +1,7 @@
+@MethodsReturnNonnullByDefault
+@ParametersAreNonnullByDefault
+package com.github.minecraftschurlimods.arsmagicalegacy.common.ritual;
+
+import net.minecraft.MethodsReturnNonnullByDefault;
+
+import javax.annotation.ParametersAreNonnullByDefault;
Index: src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/ItemDropRitualTrigger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/ItemDropRitualTrigger.java b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/ItemDropRitualTrigger.java
new file mode 100644
--- /dev/null	(date 1651246274195)
+++ b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/ItemDropRitualTrigger.java	(date 1651246274195)
@@ -0,0 +1,74 @@
+package com.github.minecraftschurlimods.arsmagicalegacy.common.ritual;
+
+import com.github.minecraftschurlimods.codeclib.CodecHelper;
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.crafting.Ingredient;
+import net.minecraft.world.level.entity.EntityTypeTest;
+import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.TickEvent;
+import net.minecraftforge.fml.LogicalSide;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+
+/**
+ *
+ */
+public record ItemDropRitualTrigger(List<Ingredient> ingredients) implements Ritual.RitualTrigger {
+    static final Codec<ItemDropRitualTrigger> CODEC = RecordCodecBuilder.create(inst -> inst.group(CodecHelper.INGREDIENT.listOf().fieldOf("ingredients").forGetter(ItemDropRitualTrigger::ingredients)).apply(inst, ItemDropRitualTrigger::new));
+
+    @Override
+    public void register(final Ritual ritual) {
+        MinecraftForge.EVENT_BUS.addListener((TickEvent.PlayerTickEvent t) -> onItemTick(t, ritual));
+    }
+
+    private void onItemTick(final TickEvent.PlayerTickEvent t, final Ritual ritual) {
+        if (t.side != LogicalSide.SERVER || t.phase != TickEvent.Phase.START) {
+            return;
+        }
+        if (!(t.player.level instanceof ServerLevel serverLevel)) {
+            return;
+        }
+        for (final ItemEntity item : serverLevel.getEntitiesOfClass(ItemEntity.class, AABB.ofSize(t.player.position(), 5, 5, 5), itemEntity -> ingredients.stream().anyMatch(ingredient -> ingredient.test(itemEntity.getItem())))) {
+            if (ritual.perform(serverLevel, item.getOnPos())) {
+                return;
+            }
+        }
+    }
+
+    @Override
+    public boolean trigger(final ServerLevel level, final BlockPos pos) {
+        Set<ItemEntity> consumable = new HashSet<>();
+        var ingredients = new ArrayList<>(this.ingredients);
+        level.getEntities().get(EntityTypeTest.forClass(ItemEntity.class), AABB.ofSize(Vec3.atCenterOf(pos), 3, 3, 3), itemEntity -> {
+            for (Iterator<Ingredient> iterator = ingredients.iterator(); iterator.hasNext(); ) {
+                final Ingredient ingredient = iterator.next();
+                if (ingredient.test(itemEntity.getItem())) {
+                    consumable.add(itemEntity);
+                    iterator.remove();
+                }
+            }
+        });
+        if (!ingredients.isEmpty()) {
+            return false;
+        }
+        for (ItemEntity itemEntity : consumable) {
+            itemEntity.kill();
+        }
+        return true;
+    }
+
+    @Override
+    public Codec<? extends Ritual.RitualTrigger> codec() {
+        return CODEC;
+    }
+}
Index: src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/EntitySpawnRitualEffect.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/EntitySpawnRitualEffect.java b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/EntitySpawnRitualEffect.java
new file mode 100644
--- /dev/null	(date 1651246274177)
+++ b/src/main/java/com/github/minecraftschurlimods/arsmagicalegacy/common/ritual/EntitySpawnRitualEffect.java	(date 1651246274177)
@@ -0,0 +1,26 @@
+package com.github.minecraftschurlimods.arsmagicalegacy.common.ritual;
+
+import com.mojang.serialization.Codec;
+import com.mojang.serialization.codecs.RecordCodecBuilder;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.MobSpawnType;
+import net.minecraftforge.registries.ForgeRegistries;
+
+/**
+ *
+ */
+public record EntitySpawnRitualEffect(EntityType<?> entityType) implements Ritual.RitualEffect {
+    static final Codec<EntitySpawnRitualEffect> CODEC = RecordCodecBuilder.create(inst -> inst.group(ForgeRegistries.ENTITIES.getCodec().fieldOf("entityType").forGetter(EntitySpawnRitualEffect::entityType)).apply(inst, EntitySpawnRitualEffect::new));
+
+    @Override
+    public void performEffect(final ServerLevel level, final BlockPos pos) {
+        entityType.spawn(level, null, null, pos, MobSpawnType.TRIGGERED, false, false);
+    }
+
+    @Override
+    public Codec<? extends Ritual.RitualEffect> codec() {
+        return CODEC;
+    }
+}
